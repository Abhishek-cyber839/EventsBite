{"version":3,"sources":["app/models/paginations.ts","app/models/activity.ts","app/models/ActivityParticipant.ts","app/api/agent.ts","app/api/Stores/activityStore.ts","app/api/Stores/profileStore.ts","app/api/Stores/UserStore.ts","app/api/Stores/store.ts","app/api/Stores/CommonStore.ts","app/api/Stores/ModalStore.ts","app/api/Stores/commentStore.ts","app/layouts/NavBar.tsx","Feautures/activities/ActivityFilter.tsx","Feautures/activities/ActivityListParticipants.tsx","Feautures/activities/ActivityPlaceholder.tsx","Feautures/activities/Dashboard.tsx","app/common/form/CTextInput.tsx","Feautures/users/LoginForm.tsx","Feautures/Errors/ValidationErrors.tsx","Feautures/users/RegisterForm.tsx","Feautures/activities/Home.tsx","app/layouts/LoadingComponent.tsx","app/common/form/CTextArea.tsx","app/common/form/CSelectInput.tsx","app/common/form/CDateInput.tsx","app/common/form/CategoryOptions.ts","Feautures/activities/AForm.tsx","Feautures/activities/ActivityDetails/ActivityDHeader.tsx","Feautures/activities/ActivityDetails/ActivityDescription.tsx","Feautures/activities/ActivityDetails/ActivityDChat.tsx","Feautures/activities/ActivityDetails/ActivityDSidebar.tsx","Feautures/activities/Details.tsx","Feautures/Errors/NotFound.tsx","Feautures/Errors/ServerError.tsx","app/common/ModalContainer.tsx","app/common/PhotoUploadWidget.tsx","app/common/PhotoCropperWidget.tsx","app/common/ImageUpload.tsx","Feautures/Profiles/ProfilePhotos.tsx","Feautures/Profiles/Followings.tsx","Feautures/Profiles/ProfilActivities.tsx","Feautures/Profiles/EditProfile.tsx","Feautures/Profiles/ProfileAbout.tsx","Feautures/Profiles/ProfileContent.tsx","Feautures/Profiles/ProfileHeader.tsx","Feautures/Profiles/Profile.tsx","app/layouts/PrivateRoute.tsx","app/common/hooks.ts","Feautures/users/RegSuccess.tsx","Feautures/users/ConfirmEmail.tsx","app/layouts/App.tsx","reportWebVitals.ts","app/layouts/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","_pageNumber","_pageSize","pageNumber","pageSize","ActivityForm","activity","id","undefined","title","date","description","category","city","venue","Activity","init","Object","assign","Profile","user","userName","displayName","image","axios","defaults","baseURL","process","interceptors","response","use","a","headers","console","log","JSON","parse","error","status","config","method","errors","hasOwnProperty","history","push","ModalErrors","key","flat","toast","startsWith","store","userStore","LogOut","commonStore","setServerErrors","Promise","reject","request","token","Authorization","responseData","requests","url","get","then","body","post","put","delete","Agent","CrudOperations","ActivitiesList","params","ActivityDetails","Create","Update","Delete","Attend","Account","currentUser","loginUser","registerUser","fbLogin","accessToken","refreshToken","verifyEmail","email","resendVerificationEmail","Profiles","getProfile","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateFollowings","getFollowingsList","predicate","profileActivities","updateProfile","profile","ActivityStore","activityRegistry","Map","Loading","InitialLoading","currentActivity","editing","pagingParams","set","LoadActivities","setInitialLoading","axiosParams","result","forEach","SetActivity","setPagination","setPagingParams","setPredicate","value","resetPredicate","state","createActivity","participant","newActivity","hostUserName","participants","runInAction","updateActivity","updatedActivity","GetActivity","deleteActivity","LoadActivity","isGoing","some","isHost","host","find","Date","updateAttendance","filter","message","cancelActivity","isCancelled","clearCurrentActivity","updateParticipantFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","ActivitiesByDate","reduce","activities","format","ProfileStore","LoadingProfile","Uploading","followings","LoadingFollowings","ActiveTab","userActivities","setActiveTab","activeTab","LoadProfile","messgae","photo","photos","IsMainPhoto","setImage","setMain","isMainPhoto","ph","updateFollowing","activityStore","ListFollowings","Followings","LoadProfileActivities","setDisplayName","UserStore","fbAccessToken","fbLoading","refreshTime","LogIn","credentials","setToken","StartRefreshTokenCountDwon","modalStore","CloseModal","window","localStorage","removeItem","getUserWithMatchingToken","Register","Image","name","FacebookLogin","APILogin","catch","FB","login","resp","authResponse","scope","FacebookLoginStatus","getLoginStatus","RefreshToken","Token","JwtToken","atob","split","timeout","exp","now","setTimeout","StopRefreshTokenCountDwon","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","OpenModal","content","profileStore","commentStore","comments","hubConnection","createConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","IsLoggedIn","Menu","inverted","fixed","style","marginDown","Container","className","Item","header","as","NavLink","exact","to","src","alt","marginRight","Button","positive","position","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","active","has","textAlign","margin","onChange","List","horizontal","map","Popup","hoverable","trigger","circular","ActivityPlaceholder","Grid","columns","stackable","Column","Segment","raised","Placeholder","Line","Paragraph","length","GroupedActivities","useState","LoadingNext","setLoadingNext","useEffect","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","index","group","CardGroup","Card","Content","Label","color","floated","Meta","Description","ribbon","ActivityListParticipants","extra","Icon","basic","CTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","placeholder","type","render","marginBottom","loading","fluid","ValidationErrors","Message","validations","Yup","required","validationSchema","isValid","dirty","disabled","verticalAlign","Divider","LoadingComponent","Dimmer","Loader","CTextArea","CSelectInput","helpers","Select","clearable","options","event","setValue","onBlur","setTouched","CDateInput","selected","CatergoryOptions","useParams","useHistory","setActivity","nullable","clearing","enableReinitialize","uuid","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","Group","padding","zIndex","left","top","bottom","height","Comment","Avatar","Author","Text","whiteSpace","Metadata","formatDistanceToNow","resetForm","onKeyPress","e","shiftKey","preventDefault","border","secondary","relaxed","divided","animated","NotFound","details","Modal","onClose","PhotoUploadWidget","setFiles","dropzoneStyle","borderColor","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoCropperWidget","imagePreview","setCropper","initialAspectRatio","viewMode","aspectRatio","guides","autoCropArea","background","onInitialized","cropper","ImageUpload","uploading","files","revokeObjectURL","priview","Step","ordered","marginLeft","minHeight","overflow","widths","getCroppedCanvas","toBlob","blob","IsCurrentUser","addPhotoMode","setaddPhotoMode","target","setTarget","itemsPerRow","currentTarget","handleSetMainPhoto","handledeletePhoto","bio","wrapped","ui","setEditMode","editMode","panes","menuItem","Tab","Pane","onTabChange","activeIndex","whiteText","ItemGroup","followingCount","backgroundColor","paddingLeft","paddingRight","Feed","Event","Summary","PrivateRoute","Component","component","rest","UseQuery","useLocation","search","RegSuccess","ConfirmEmail","Status","setstatus","resendEmail","Inline","location","finally","path","Home","Dashboard","Details","AForm","ServerError","LoginForm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"gXASaA,EAGT,WAAYC,EAAOC,GAAuB,yBAF1CD,UAEyC,OADzCC,gBACyC,EACrCC,KAAKF,KAAOA,EACZE,KAAKD,WAAaA,GAIbE,EAGT,aAA2C,IAA/BC,EAA8B,uDAAhB,EAAEC,EAAc,uDAAF,EAAE,yBAF1CC,gBAE0C,OAD1CC,cAC0C,EACtCL,KAAKI,WAAaF,EAClBF,KAAKK,SAAWF,GCFXG,EAQT,WAAYC,GAA0B,yBAPtCC,QAAaC,EAOwB,KANrCC,MAAe,GAMsB,KALrCC,KAAmB,KAKkB,KAJrCC,YAAqB,GAIgB,KAHrCC,SAAkB,GAGmB,KAFrCC,KAAc,GAEuB,KADrCC,MAAe,GAERR,IACCP,KAAKQ,GAAKD,EAASC,GACnBR,KAAKU,MAAQH,EAASG,MACtBV,KAAKW,KAAOJ,EAASI,KACrBX,KAAKY,YAAcL,EAASK,YAC5BZ,KAAKa,SAAWN,EAASM,SACzBb,KAAKc,KAAOP,EAASO,KACrBd,KAAKe,MAAQR,EAASQ,QAKrBC,EACT,WAAYC,GAAoB,oBAE5BC,OAAOC,OAAOnB,KAAKiB,IChCdG,EACT,WAAYC,GAAW,oBACnBrB,KAAKsB,SAAWD,EAAKC,SACrBtB,KAAKuB,YAAcF,EAAKE,YACxBvB,KAAKwB,MAAQH,EAAKG,O,0BCP1BC,IAAMC,SAASC,QAAUC,OAgBzBH,IAAMI,aAAaC,SAASC,IAA5B,+BAAAC,EAAA,MAAgC,WAAMF,GAAN,eAAAE,EAAA,iFAGtBjC,EAAa+B,EAASG,QAAT,YAHS,uBAKxBC,QAAQC,IAAI,oBACZL,EAAShC,KAAO,IAAID,EAAgBiC,EAAShC,KAAKsC,KAAKC,MAAMtC,IANrC,kBAOjB+B,GAPiB,gCASrBA,GATqB,2CAAhC,uDAUE,SAACQ,GAAsB,IAAD,EACpB,EAAqCA,EAAMR,SAApChC,EAAP,EAAOA,KAAKyC,EAAZ,EAAYA,OAAOC,EAAnB,EAAmBA,OAAOP,EAA1B,EAA0BA,QAC1B,OAAOM,GACH,KAAK,IASD,GAFqB,QAAlBC,EAAOC,QAAoB3C,EAAK4C,OAAOC,eAAe,OACrDC,GAAQC,KAAK,cACd/C,EAAK4C,OAAO,CACX,IAAMI,EAAc,GACpB,IAAI,IAAMC,KAAOjD,EAAK4C,OACf5C,EAAK4C,OAAOK,IACXD,EAAYD,KAAK/C,EAAK4C,OAAOK,IAGrC,MAAMD,EAAYE,OAEH,kBAATlD,GACNmD,IAAMX,MAAMxC,GAChB,MACJ,KAAK,KACD,UAAGmC,EAAQ,0BAAX,aAAG,EAA4BiB,WAAW,mCACvCC,EAAMC,UAAUC,SAChBJ,IAAMX,MAAM,oBAEf,MACJ,KAAK,IACDW,IAAMX,MAAM,aACZ,MACJ,KAAK,IACDa,EAAMG,YAAYC,gBAAgBzD,GAClC8C,GAAQC,KAAK,iBAGrB,OAAOW,QAAQC,OAAOnB,MAI1Bb,IAAMI,aAAa6B,QAAQ3B,KAAI,SAAAS,GAC3B,IAAMmB,EAAQR,EAAMG,YAAYK,MAEhC,OADGA,IAAOnB,EAAOP,QAAQ2B,cAAf,iBAAyCD,IAC5CnB,KAGX,IAAMqB,EAAe,SAAC/B,GAAD,OAA4BA,EAAShC,MACpDgE,EACE,SAACC,GAAD,OAAgBtC,IAAMuC,IAAID,GAAKE,KAAKJ,IADtCC,EAEG,SAACC,EAAWG,GAAZ,OAAwBzC,IAAM0C,KAAKJ,EAAIG,GAAMD,KAAKJ,IAFrDC,EAGE,SAACC,EAAWG,GAAZ,OAAwBzC,IAAM2C,IAAIL,EAAIG,GAAMD,KAAKJ,IAHnDC,EAIE,SAACC,GAAD,OAAgBtC,IAAM4C,OAAON,GAAKE,KAAKJ,IAkDhCS,EAND,CACVC,eAxCmB,CACnBC,eAAgB,SAACC,GAAD,OAA4BhD,IAAMuC,IAAiC,eAAe,CAACS,YACnGC,gBAAgB,SAAClE,GAAD,OAAesD,EAAA,sBAA4BtD,KAC3DmE,OAAO,SAACpE,GAAD,OAA2BuD,EAAc,cAAcvD,IAC9DqE,OAAO,SAACpE,EAAUD,GAAX,OAAqCuD,EAAA,sBAA4BtD,GAAKD,IAC7EsE,OAAO,SAACrE,GAAD,OAAesD,EAAA,sBAA4BtD,KAClDsE,OAAO,SAACtE,GAAD,OAAesD,EAAA,sBAA6BtD,EAA7B,WAAyC,MAmC/DuE,QAhCY,CACZC,YAAa,kBAAMlB,EAAa,aAChCmB,UAAW,SAAC5D,GAAD,OAAmByC,EAAc,iBAAiBzC,IAC7D6D,aAAc,SAAC7D,GAAD,OAAmByC,EAAc,oBAAoBzC,IACnE8D,QAAQ,SAACC,GAAD,OAAwBtB,EAAA,uCAA8CsB,GAAc,KAC5FC,aAAa,kBAAMvB,EAAc,yBAAyB,KAC1DwB,YAAY,SAAC3B,EAAa4B,GAAd,OAA+BzB,EAAA,qCAA4CH,EAA5C,kBAA2D4B,GAAQ,KAC9GC,wBAAwB,SAACD,GAAD,OAAkBzB,EAAA,mDAAyDyB,MA0BnGE,SAtBa,CACbC,WAAW,SAACC,GAAD,OAAqB7B,EAAA,mBAAyB6B,KACzDC,YAAY,SAACC,GACT,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAOH,GAChBpE,IAAM0C,KAAK,SAAS2B,EAAS,CAChC7D,QAAQ,CAAC,eAAe,0BAIhCgE,aAAa,SAACzF,GAAD,OAAesD,EAAA,kBAAyBtD,EAAzB,YAAsC,KAClE0F,YAAY,SAAC1F,GAAD,OAAesD,EAAA,kBAAwBtD,KACnD2F,iBAAiB,SAACR,GAAD,OAAqB7B,EAAA,kBAAyB6B,GAAW,KAC1ES,kBAAkB,SAACT,EAAgBU,GAAjB,OAAsCvC,EAAA,kBAAwB6B,EAAxB,sBAA8CU,KACtGC,kBAAkB,SAACX,EAAgBU,GAAjB,OAAsCvC,EAAA,mBAAyB6B,EAAzB,iCAA0DU,KAClHE,cAAc,SAACC,GAAD,OAA8B1C,EAAa,WAAW0C,MCzHnDC,E,WAWjB,aAAe,IAAD,gCATdC,iBAAmB,IAAIC,IAST,KARdC,SAAkB,EAQJ,KAPdC,gBAAyB,EAOX,KANdC,qBAAuCrG,EAMzB,KALdsG,SAAkB,EAKJ,KAJdhH,WAA+B,KAIjB,KAHdiH,aAAe,IAAI/G,EAGL,KAFdoG,WAAY,IAAIM,KAAMM,IAAI,OAAM,GAElB,KAYdC,eAZc,sBAYG,4BAAAlF,EAAA,6DACb,EAAKmF,mBAAkB,GADV,kBAGY7C,EAAMC,eAAeC,eAAe,EAAK4C,aAHrD,QAGHC,EAHG,QAIFvH,KAAKA,KAAKwH,SAAQ,SAAC/G,GACtB,EAAKgH,YAAYhH,MAErB,EAAKiH,cAAcH,EAAOvH,KAAKC,YAC/B,EAAKoH,mBAAkB,GARd,kDAUTjF,QAAQC,IAAR,gEACA,EAAKgF,mBAAkB,GAXd,0DAZH,KA2BdM,gBAAkB,SAACT,GAAD,OAA+B,EAAKA,aAAeA,GA3BvD,KA4BdQ,cAAgB,SAACzH,GAAD,OAA2B,EAAKA,WAAaA,GA5B/C,KA6Bd2H,aAAe,SAAC3E,EAAW4E,GACvB,IAAMC,EAAiB,WACnB,EAAKvB,UAAUiB,SAAQ,SAACK,EAAM5E,GACf,cAARA,GACC,EAAKsD,UAAUhC,OAAOtB,OAIlC,OAAOA,GACH,IAAK,MACD6E,IACA,EAAKvB,UAAUY,IAAI,OAAM,GACzB,MACJ,IAAK,UACDW,IACA,EAAKvB,UAAUY,IAAI,WAAU,GAC7B,MACJ,IAAK,YACDW,IACA,EAAKvB,UAAUY,IAAI,aAAY,GAC/B,MACJ,IAAK,YACD,EAAKZ,UAAUhC,OAAO,aACtB,EAAKgC,UAAUY,IAAI,YAAYU,KApD7B,KAsEdR,kBAAoB,SAACU,GAAD,OAAmB,EAAKhB,eAAiBgB,GAtE/C,KAwEdC,eAxEc,uCAwEG,WAAOvH,GAAP,mBAAAyB,EAAA,6DACPX,EAAQ8B,EAAMC,UAAU/B,KACxB0G,EAAc,IAAI3G,EAAQC,GAFnB,kBAIHiD,EAAMC,eAAeI,OAAOpE,GAJzB,QAKHyH,EAAc,IAAIhH,EAAST,IACrB0H,aAAe5G,EAAMC,SACjC0G,EAAYE,aAAe,CAACH,GAC5B,EAAKR,YAAYS,GACjBG,aAAY,kBAAM,EAAKrB,gBAAkBkB,KAThC,kDAWT9F,QAAQC,IAAI,6CAXH,0DAxEH,2DAwFdiG,eAxFc,uCAwFG,WAAO7H,GAAP,SAAAyB,EAAA,mEAENzB,EAASC,GAFH,gCAGC8D,EAAMC,eAAeK,OAAOrE,EAASC,GAAGD,GAHzC,OAKT4H,aAAY,WACR,GAAG5H,EAASC,GAAG,CACX,IAAI6H,EAAe,2BAAO,EAAKC,YAAY/H,EAASC,KAAOD,GAC3D,EAAKmG,iBAAiBO,IAAI1G,EAASC,GAAG6H,GACtC,EAAKvB,gBAAkBuB,MATtB,gDAaTnG,QAAQC,IAAI,6CAbH,yDAxFH,2DAyGdoG,eAzGc,uCAyGG,WAAO/H,GAAP,SAAAwB,EAAA,6DACb,EAAK4E,SAAU,EADF,kBAGHtC,EAAMC,eAAeM,OAAOrE,GAHzB,OAIT2H,aAAY,WACR,EAAKzB,iBAAiBrC,OAAO7D,GAC7B,EAAKoG,SAAU,KANV,gDAST1E,QAAQC,IAAI,6CACZgG,aAAY,WACR,EAAKvB,SAAU,KAXV,yDAzGH,2DA6Hd4B,aA7Hc,uCA6HC,WAAOhI,GAAP,eAAAwB,EAAA,2DACPzB,EAAW,EAAK+H,YAAY9H,IADrB,uBAGP,EAAKsG,gBAAkBvG,EAHhB,kBAIAA,GAJA,cAOP,EAAK4G,mBAAkB,GAPhB,mBASc7C,EAAMC,eAAeG,gBAAgBlE,GATnD,eASHD,EATG,OAUH,EAAKgH,YAAYhH,GACjB4H,aAAY,WACR,EAAKrB,gBAAkBvG,KAE3B,EAAK4G,mBAAkB,GAdpB,kBAeI5G,GAfJ,kCAiBH2B,QAAQC,IAAR,MACA,EAAKgF,mBAAkB,GAlBpB,0DA7HD,2DAoJLI,YAAc,SAAChH,GACpB,IAEQ,EAFFc,EAAO8B,EAAMC,UAAU/B,KAE1BA,IACCd,EAASkI,QAAUlI,EAAS2H,aAAcQ,MACpC,SAAAX,GAAW,OAAIA,EAAYzG,WAAaD,EAAKC,YAEnDf,EAASoI,OAASpI,EAAS0H,eAAiB5G,EAAKC,SACjDf,EAASqI,KAAT,UAAgBrI,EAAS2H,oBAAzB,aAAgB,EAAuBW,MAAK,SAAAd,GAAW,OAAIA,EAAYzG,WAAaf,EAAS0H,iBAEjG1H,EAASI,KAAO,IAAImI,KAAKvI,EAASI,MAClC,EAAK+F,iBAAiBO,IAAI1G,EAASC,GAAGD,IA/J5B,KAkKN+H,YAAc,SAAC9H,GACpB,OAAO,EAAKkG,iBAAiB1C,IAAIxD,IAnKtB,KAgLduI,iBAhLc,sBAgLK,4BAAA/G,EAAA,6DACTX,EAAO8B,EAAMC,UAAU/B,KAC7B,EAAKuF,SAAU,EAFA,kBAILtC,EAAMC,eAAeO,OAAO,EAAKgC,gBAAiBtG,IAJ7C,OAKX2H,aAAY,WAAO,IAAD,EAEd,aAAG,EAAKrB,uBAAR,aAAG,EAAsB2B,QAAQ,CAAC,IAAD,EAE7B,EAAK3B,gBAAgBoB,aAArB,UAAoC,EAAKpB,gBAAgBoB,oBAAzD,aAAoC,EAAmCc,QAAO,SAAAjB,GAAW,OAAIA,EAAYzG,YAAZ,OAAyBD,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAMC,aAC5H,EAAKwF,gBAAgB2B,SAAU,MAG/B,CAAC,IAAD,IACMV,EAAc,IAAI3G,EAAQC,GAChC,YAAKyF,uBAAL,mBAAsBoB,oBAAtB,SAAoCrF,KAAKkF,GACzC,EAAKjB,gBAAiB2B,SAAU,EAGpC,EAAK/B,iBAAiBO,IAAI,EAAKH,gBAAiBtG,GAAG,EAAKsG,oBAnBjD,gDAsBX5E,QAAQC,IAAI,iDAAiD,KAAM8G,SAtBxD,yBAyBXd,aAAY,kBAAM,EAAKvB,SAAU,KAzBtB,4EAhLL,KA6MdsC,eA7Mc,sBA6MG,sBAAAlH,EAAA,6DACb,EAAK4E,SAAU,EADF,kBAGHtC,EAAMC,eAAeO,OAAO,EAAKgC,gBAAiBtG,IAH/C,OAIT2H,aAAY,WAAO,IAAD,EACd,EAAKrB,gBAAiBqC,cAAc,UAAC,EAAKrC,uBAAN,aAAC,EAAsBqC,aAC3D,EAAKzC,iBAAiBO,IAAI,EAAKH,gBAAiBtG,GAAG,EAAKsG,oBANnD,gDAST5E,QAAQC,IAAI,iDAAiD,KAAM8G,SAT1D,yBAYTd,aAAY,kBAAM,EAAKvB,SAAU,KAZxB,4EA7MH,KAmOdwC,qBAAuB,kBAAM,EAAKtC,qBAAkBrG,GAnOtC,KAqOd4I,2BAA6B,SAAC1D,GAC1B,EAAKe,iBAAiBY,SAAQ,SAAC/G,GAAc,IAAD,EACxC,UAAAA,EAAS2H,oBAAT,SAAuBZ,SAAQ,SAAAS,GACxBA,EAAYzG,WAAaqE,IACxBoC,EAAYuB,UAAYvB,EAAYwB,iBAAmBxB,EAAYwB,iBACnExB,EAAYuB,WAAavB,EAAYuB,kBAzOjDE,YAAmBxJ,MACnByJ,aACI,kBAAM,EAAKpD,UAAUqD,UACrB,WACI,EAAKhD,iBAAiBiD,QACtB,EAAK3C,aAAe,IAAI/G,EACxB,EAAKiH,oB,6CAiDjB,WACI,IAAMzC,EAAS,IAAImF,gBAUnB,OATAnF,EAAOuB,OAAO,aAAahG,KAAKgH,aAAa5G,WAAWyJ,YACxDpF,EAAOuB,OAAO,WAAWhG,KAAKgH,aAAa3G,SAASwJ,YACpD7J,KAAKqG,UAAUiB,SAAQ,SAACK,EAAM5E,GACf,cAARA,EACC0B,EAAOuB,OAAOjD,EAAK4E,EAAemC,eAElCrF,EAAOuB,OAAOjD,EAAI4E,MAGnBlD,I,4BAsDX,WACI,OAAOsF,MAAMC,KAAKhK,KAAK0G,iBAAiBuD,UAAUC,MAAM,SAAClI,EAAEmI,GAAH,OAASnI,EAAErB,KAAMyJ,UAAYD,EAAExJ,KAAMyJ,e,6BA4CjG,WACI,OAAOlJ,OAAOmJ,QACVrK,KAAKsK,iBAAiBC,QAAO,SAACC,EAAWjK,GACrC,IAAMI,EAAO8J,kBAAOlK,EAASI,KAAM,eAEnC,OADA6J,EAAW7J,GAAQ6J,EAAW7J,GAAX,sBAAuB6J,EAAW7J,IAAlC,CAAwCJ,IAAY,CAACA,GACjEiK,IACT,S,cC1LDE,EAAb,WAWI,aAAc,IAAD,gCAVblE,QAAyB,KAUZ,KATbmE,gBAAiB,EASJ,KARbC,WAAY,EAQC,KAPbhE,SAAU,EAOG,KANbiE,WAAuB,GAMV,KALbC,mBAA4B,EAKf,KAJbC,UAAmB,EAIN,KAHbC,eAAgC,GAGnB,KAFb3E,UAA0B,KAEb,KAcb4E,aAAe,SAACC,GAAD,OAAmB,EAAKH,UAAYG,GAdtC,KAgBbC,YAhBa,uCAgBC,WAAOxF,GAAP,eAAA3D,EAAA,6DACV,EAAK2I,gBAAiB,EADZ,kBAGiBrG,EAAMmB,SAASC,WAAWC,GAH3C,OAGAa,EAHA,OAIN2B,aAAY,WACR,EAAK3B,QAAUA,EACf,EAAKmE,gBAAiB,KANpB,gDASNzI,QAAQC,IAAI,wCAAwC,KAAMiJ,SAC1DjD,aAAY,kBAAM,EAAKwC,gBAAiB,KAVlC,yDAhBD,2DAqCb/E,YArCa,uCAqCC,WAAOC,GAAP,iBAAA7D,EAAA,6DACV,EAAK4I,WAAW,EADN,kBAGkBtG,EAAMmB,SAASG,YAAYC,GAH7C,OAGA/D,EAHA,OAIAuJ,EAAQvJ,EAAShC,KACvBqI,aAAY,WACS,IAAD,EAAb,EAAK3B,UACJ,YAAKA,QAAQ8E,cAAb,SAAqBzI,KAAKwI,GACvBA,EAAME,aAAepI,EAAMC,UAAU/B,OACpC8B,EAAMC,UAAUoI,SAASH,EAAMtH,KAC/B,EAAKyC,QAAQhF,MAAQ6J,EAAMtH,MAGnC,EAAK6G,WAAY,KAbf,gDAgBN1I,QAAQC,IAAI,wCAAwC,KAAMiJ,SAC1DjD,aAAY,kBAAM,EAAKyC,WAAY,KAjB7B,yDArCD,2DA0Dba,QA1Da,uCA0DH,WAAOJ,GAAP,SAAArJ,EAAA,6DACN,EAAK4E,SAAU,EADT,kBAGItC,EAAMmB,SAASQ,aAAaoF,EAAM7K,IAHtC,OAIF2C,EAAMC,UAAUoI,SAASH,EAAMtH,KAC/BoE,aAAY,WACL,EAAK3B,SAAW,EAAKA,QAAQ8E,SAE5B,EAAK9E,QAAQ8E,OAAOzC,MAAK,SAAAwC,GAAK,OAAIA,EAAMK,eAAcA,aAAc,EAEpE,EAAKlF,QAAQ8E,OAAOzC,MAAK,SAAA8C,GAAE,OAAIA,EAAGnL,KAAO6K,EAAM7K,MAAKkL,aAAc,EAClE,EAAKlF,QAAQhF,MAAQ6J,EAAMtH,IAC3B,EAAK6C,SAAU,MAZrB,gDAgBF1E,QAAQC,IAAI,uCAAuC,KAAMiJ,SACzDjD,aAAY,kBAAM,EAAKvB,SAAU,KAjB/B,yDA1DG,2DA+EbV,YA/Ea,uCA+EC,WAAOmF,GAAP,SAAArJ,EAAA,6DACV,EAAK4E,SAAU,EADL,kBAGAtC,EAAMmB,SAASS,YAAYmF,EAAM7K,IAHjC,OAIN2H,aAAY,WACS,IAAD,EAAb,EAAK3B,UACJ,EAAKA,QAAQ8E,OAAb,UAAsB,EAAK9E,QAAQ8E,cAAnC,aAAsB,EAAqBtC,QAAO,SAAA2C,GAAE,OAAIA,EAAGnL,KAAO6K,EAAM7K,MACxE,EAAKoG,SAAU,MAPjB,gDAWN1E,QAAQC,IAAI,uCAAuC,KAAMiJ,SACzDjD,aAAY,kBAAM,EAAKvB,SAAU,KAZ3B,yDA/ED,2DA+FbgF,gBA/Fa,uCA+FK,WAAOjG,EAAgB2D,GAAvB,SAAAtH,EAAA,6DACd,EAAK4E,SAAU,EADD,kBAGJtC,EAAMmB,SAASU,iBAAiBR,GAH5B,OAIVxC,EAAM0I,cAAcxC,2BAA2B1D,GAC/CwC,aAAY,WAAO,IAAD,IACX,EAAK3B,SAAW,EAAKA,QAAQlF,YAAb,UAA0B6B,EAAMC,UAAU/B,YAA1C,aAA0B,EAAsBC,WAAY,EAAKkF,QAAQlF,WAAaqE,IACrG2D,EAAa,EAAK9C,QAAQ+C,iBAAoB,EAAK/C,QAAQ+C,iBAC3D,EAAK/C,QAAQ8C,WAAa,EAAK9C,QAAQ8C,WAExC,EAAK9C,SAAW,EAAKA,QAAQlF,YAAb,UAA0B6B,EAAMC,UAAU/B,YAA1C,aAA0B,EAAsBC,YAC/DgI,EAAa,EAAK9C,QAAQ+C,iBAAoB,EAAK/C,QAAQ+C,kBAE/D,EAAKsB,WAAWvD,SAAQ,SAAAd,GACjBA,EAAQlF,WAAaqE,IACpBa,EAAQ8C,UAAY9C,EAAQ+C,iBAAmB/C,EAAQ+C,iBACvD/C,EAAQ8C,WAAc9C,EAAQ8C,cAGtC,EAAK1C,SAAU,KAnBT,gDAsBV1E,QAAQC,IAAI,+CAA+C,KAAMiJ,SACjEjD,aAAY,kBAAM,EAAKvB,SAAU,KAvBvB,yDA/FL,6DA0HbkF,eA1Ha,uCA0HI,WAAOzF,GAAP,eAAArE,EAAA,+EAGgBsC,EAAMmB,SAASW,kBAAkB,EAAKI,QAASlF,SAAS+E,GAHxE,OAGH0F,EAHG,OAIT5D,aAAY,WACR,EAAK0C,WAAakB,KALb,gDAST7J,QAAQC,IAAI,sDAAsD,KAAMiJ,SACxEjD,aAAY,kBAAM,EAAK2C,mBAAoB,KAVlC,yDA1HJ,2DAwIbpD,aAAe,SAACC,GAAD,OAAkB,EAAKtB,UAAYsB,GAxIrC,KA0IbqE,sBA1Ia,uCA0IW,WAAOrG,GAAP,eAAA3D,EAAA,+EAESsC,EAAMmB,SAASa,kBAAkBX,EAAS,EAAKU,WAFxD,OAEVmE,EAFU,OAGhBrC,aAAY,kBAAM,EAAK6C,eAAiBR,KAHxB,gDAKhBtI,QAAQC,IAAI,6DAA6D,KAAMiJ,SAL/D,yDA1IX,2DAmJb7E,cAnJa,uCAmJG,WAAOC,GAAP,SAAAxE,EAAA,6DACJ,EAAK4E,SAAU,EADX,kBAGMtC,EAAMmB,SAASc,cAAcC,GAHnC,OAIA2B,aAAY,WAAO,IAAD,EACV3B,EAAQjF,aAAeiF,EAAQjF,eAAR,UAAwB4B,EAAMC,UAAU/B,YAAxC,aAAwB,EAAsBE,cACrE4B,EAAMC,UAAU6I,eAAezF,EAAQjF,aAE3C,EAAKiF,QAAL,2BAAmB,EAAKA,SAAYA,GACpC,EAAKI,SAAU,KATnB,gDAYA1E,QAAQC,IAAI,4CAA4C,KAAM8G,SAC9Dd,aAAY,kBAAM,EAAKvB,SAAU,KAbjC,yDAnJH,sDACT4C,YAAmBxJ,MACnByJ,aAAS,kBAAM,EAAKsB,aACpB,SAAAA,GACI,GAAsB,IAAnB,EAAKA,WAAsC,IAAnB,EAAKA,UAAgB,CAC5C,IAAM1E,EAA0B,IAAd0E,EAAkB,YAAc,YAClD,EAAKe,eAAezF,QAGpB,EAAKwE,WAAa,MApBlC,+CA0CI,WACI,SAAG1H,EAAMC,UAAU/B,OAAQrB,KAAKwG,UACtBrD,EAAMC,UAAU/B,KAAKC,WAAatB,KAAKwG,QAAQlF,aA5CjE,KCCqB4K,E,WAMjB,aAAc,IAAD,gCALb7K,KAAoB,KAKP,KAJb8K,cAA8B,KAIjB,KAHbC,WAAY,EAGC,KAFbC,iBAEa,OAIbC,MAJa,uCAIL,WAAOC,GAAP,eAAAvK,EAAA,+EAEmBsC,EAAMS,QAAQE,UAAUsH,GAF3C,OAEMlL,EAFN,OAGA8B,EAAMG,YAAYkJ,SAASnL,EAAKsC,OAChC,EAAK8I,2BAA2BpL,GAChC8G,aAAY,WACR,EAAK9G,KAAOA,KAEhBuB,GAAQC,KAAK,eACbM,EAAMuJ,WAAWC,aACjBzK,QAAQC,IAAId,GAVZ,wDAYAa,QAAQC,IAAI,mCAAmC,KAAM8G,SAZrD,+DAJK,2DAqBb5F,OAAS,WACLF,EAAMG,YAAYkJ,SAAS,MAC3BI,OAAOC,aAAaC,WAAW,OAC/B,EAAKzL,KAAO,KACZuB,GAAQC,KAAK,MAzBJ,KA4BbkK,yBA5Ba,sBA4Bc,4BAAA/K,EAAA,+EAEAsC,EAAMS,QAAQC,cAFd,OAEb3D,EAFa,OAGnB8G,aAAY,kBAAM,EAAK9G,KAAOA,KAHX,sDAKnBa,QAAQC,IAAI,+CAA+C,KAAM8G,SAL9C,8DA5Bd,KAsCb+D,SAtCa,uCAsCF,WAAOT,GAAP,eAAAvK,EAAA,+EAEgBsC,EAAMS,QAAQG,aAAaqH,GAF3C,OAEGlL,EAFH,OAQHuB,GAAQC,KAAR,8CAAoD0J,EAAYhH,QAEhEpC,EAAMuJ,WAAWC,aACjBzK,QAAQC,IAAId,GAXT,sDAaHa,QAAQC,IAAI,mCAAmC,KAAM8G,SAblD,8DAtCE,2DAwDbuC,SAAW,SAACyB,GACL,EAAK5L,OACJ,EAAKA,KAAKG,MAAQyL,IA1Db,KA6DbhB,eAAiB,SAACiB,GAAuB,EAAK7L,OAAM,EAAKA,KAAKE,YAAc2L,IA7D/D,KA+DbC,cAAgB,WACZ,EAAKf,WAAY,EACjB,IAAMgB,EAAW,SAAChI,GACdd,EAAMS,QAAQI,QAAQC,GAAanB,MAAK,SAAC5C,GACrC8B,EAAMG,YAAYkJ,SAASnL,EAAKsC,OAChC,EAAK8I,2BAA2BpL,GAChC8G,aAAY,WACR,EAAK9G,KAAOA,EACZ,EAAK+K,WAAY,KAErBxJ,GAAQC,KAAK,kBACdwK,OAAM,SAAC/K,GACNJ,QAAQC,IAAI,kEAAkEG,EAAM2G,SACpFd,aAAY,kBAAM,EAAKiE,WAAY,SAGxC,EAAKD,cACJiB,EAAS,EAAKjB,eAGdS,OAAOU,GAAGC,OAAM,SAAAC,GAAI,OAAIJ,EAASI,EAAKC,aAAarI,eAAa,CAACsI,MAAM,0BAnFlE,KA0FbC,oBA1Fa,sBA0FS,sBAAA3L,EAAA,sDAClB4K,OAAOU,GAAGM,gBAAe,SAACJ,GACH,cAAhBA,EAAKjL,SACJ,EAAK4J,cAAgBqB,EAAKC,aAAarI,gBAH7B,2CA1FT,KAmGbyI,aAnGa,sBAmGE,4BAAA7L,EAAA,+EAEYsC,EAAMS,QAAQM,eAF1B,OAEDhE,EAFC,OAGP8G,aAAY,kBAAM,EAAK9G,KAAOA,KAC9B,EAAKoL,2BAA2BpL,GAChC8B,EAAMG,YAAYkJ,SAASnL,EAAKyM,OALzB,gDAOP5L,QAAQC,IAAI,oDAAoD,KAAM8G,SAP/D,yDAnGF,KA8GLwD,2BAA6B,SAACpL,GAElC,IAAM0M,EAAW3L,KAAKC,MAAM2L,KAAK3M,EAAKsC,MAAMsK,MAAM,KAAK,KAGjDC,EAFU,IAAIpF,KAAoB,IAAfiF,EAASI,KAEV/D,UAAYtB,KAAKsF,MAAS,IAClD,EAAK/B,YAAegC,WAAW,EAAKR,aAAcK,IApHzC,KAuHLI,0BAA4B,kBAAMC,aAAa,EAAKlC,cAvH7C7C,YAAmBxJ,M,4CAElC,WAAkB,QAASA,KAAKqB,S,KCMvB8B,EAAc,CACvB0I,cAAgB,IAAIpF,EACpBnD,YAAa,ICfb,aAAc,IAAD,gCAHbhB,MAA2B,KAGd,KAFbqB,MAAuBiJ,OAAOC,aAAa2B,QAAQ,OAEtC,KADbC,WAAY,EACC,KAWblL,gBAAkB,SAACjB,GAAD,OAAuB,EAAKA,MAAQA,GAXzC,KAYbkK,SAAW,SAAC7I,GAAD,OAA0B,EAAKA,MAAQA,GAZrC,KAab+K,aAAe,kBAAM,EAAKD,WAAY,GAZlCjF,YAAmBxJ,MACnByJ,aAAS,kBAAM,EAAK9F,SACpB,SAAAA,GACOA,EACCiJ,OAAOC,aAAa8B,QAAQ,MAAMhL,GAEnCiJ,OAAOC,aAAaC,WAAW,WDS1C1J,UAAW,IAAI8I,EACfQ,WAAY,IEbZ,aAAc,IAAD,gCAJbkC,MAAc,CACVC,MAAK,EACL3K,KAAK,MAEI,KACb4K,UAAY,SAACC,GACT,EAAKH,MAAM1K,KAAO6K,EAClB,EAAKH,MAAMC,MAAO,GAHT,KAKblC,WAAa,WACT,EAAKiC,MAAM1K,KAAO,KAClB,EAAK0K,MAAMC,MAAO,GAPPrF,YAAmBxJ,OFclCgP,aAAc,IAAItE,EAClBuE,aAAc,IGlBd,aAAc,IAAD,gCAFbC,SAAyB,GAEZ,KADbC,cAAqC,KACxB,KAGbC,iBAAmB,SAACC,GACwB,IAAD,EAApClM,EAAM0I,cAAc/E,kBAEnB,EAAKqI,eAAgB,IAAIG,KAAuBC,QAA3B,UAAsC3N,QAAtC,uBAAmFyN,GAAa,CACjHG,mBAAmB,kCAAMrM,EAAMC,UAAU/B,YAAtB,aAAM,EAAsBsC,SAElD8L,yBACAC,iBAAiBC,IAASC,aAC1BC,QACD,YAAKV,qBAAL,SAAoBW,QAAQzC,OAAM,SAAA/K,GAAK,OAAIJ,QAAQC,IAAI,8DAA8DG,EAAM2G,YAC3H,EAAKkG,cAAcY,GAAG,gBAAe,SAACb,GAAD,OAA4B/G,aAAY,WACzE+G,EAAS5H,SAAQ,SAAA0I,GACbA,EAAQC,UAAY,IAAInH,KAAKkH,EAAQC,UAAU,QAEnD,EAAKf,SAAWA,QAEpB,EAAKC,cAAcY,GAAG,kBAAiB,SAACC,GACpC7H,aAAY,WACR6H,EAAQC,UAAY,IAAInH,KAAKkH,EAAQC,WAErC,EAAKf,SAASgB,QAAQF,WAvBzB,KA6BbG,eAAiB,kCACb,EAAKhB,qBADQ,aACb,EAAoBiB,OAAO/C,OAAM,SAAA/K,GAAK,OAAIJ,QAAQC,IAAI,4DAA4DG,EAAM2G,aA9B/G,KA+BboH,cAAgB,WACZ,EAAKnB,SAAW,GAChB,EAAKiB,kBAjCI,KAoCbG,WApCa,uCAoCA,WAAO3I,GAAP,iBAAA3F,EAAA,6DACT2F,EAAM0H,WAAN,UAAmBlM,EAAM0I,cAAc/E,uBAAvC,aAAmB,EAAqCtG,GAD/C,4BAGC,EAAK2O,qBAHN,aAGC,EAAoBoB,OAAO,cAAc5I,GAH1C,sDAMLzF,QAAQC,IAAI,uDAAuD,KAAM8G,SANpE,wDApCA,sDACTO,YAAmBxJ,QHoBdwQ,EAAeC,wBAActN,GAE7BuN,EAAW,WACpB,OAAOC,qBAAWH,I,eIQPI,eAnCA,WACX,IAAQxN,EAAcsN,IAAdtN,UACA/B,EAA4B+B,EAA5B/B,KAAMgC,EAAsBD,EAAtBC,OAAOwN,EAAezN,EAAfyN,WACrB,OACI,cAACC,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAAMC,MAAO,CAAEC,WAAW,IAA/C,SACG,eAACC,EAAA,EAAD,CAAWC,UAAU,cAArB,UACI,eAACN,EAAA,EAAKO,KAAN,CAAWC,QAAM,EAACC,GAAIC,IAASC,OAAK,EAACC,GAAG,IAAxC,UACI,qBAAKC,IAAI,mBAAmBC,IAAI,GAAGX,MAAO,CAAEY,YAAY,MAD5D,UAIEhB,GACD,qCACA,cAACC,EAAA,EAAKO,KAAN,CAAWnE,KAAK,aAAaqE,GAAIC,IAASE,GAAG,gBAC7C,cAACZ,EAAA,EAAKO,KAAN,UACI,cAACS,EAAA,EAAD,CAAQP,GAAIC,IAASE,GAAG,kBAAkBN,UAAU,cAAcW,UAAQ,EAAChD,QAAQ,sBAEvF,eAAC+B,EAAA,EAAKO,KAAN,CAAWW,SAAS,QAApB,UACI,cAAC/E,EAAA,EAAD,CAAO0E,KAAS,OAAJtQ,QAAI,IAAJA,OAAA,EAAAA,EAAMG,QAAS,oBAAqByQ,QAAM,EAACC,OAAO,UAC9D,cAACC,EAAA,EAAD,CACIC,SAAS,WACTC,KAAI,OAAEhR,QAAF,IAAEA,OAAF,EAAEA,EAAME,YAFhB,SAII,eAAC4Q,EAAA,EAASrB,KAAV,WACI,cAACqB,EAAA,EAASd,KAAV,CAAeE,GAAIe,IAAMZ,GAAE,2BAAerQ,QAAf,IAAeA,OAAf,EAAeA,EAAMC,UAAY+Q,KAAK,UAAUE,KAAK,SAChF,cAACJ,EAAA,EAASd,KAAV,CAAemB,QAASnP,EAAQgP,KAAK,UAAUE,KAAK,6B,+ECahE3B,gBApCO,WACnB,MAAmDF,IAA3C7E,cAAexF,EAAvB,EAAuBA,UAAUqB,EAAjC,EAAiCA,aAChC,OACI,qCACA,eAACoJ,EAAA,EAAD,CAAM2B,UAAQ,EAACC,KAAK,QAAQzB,MAAO,CAAE0B,MAAM,OAAOC,UAAU,IAA5D,UACI,cAACC,EAAA,EAAD,CAAQzB,UAAU,cAAcmB,KAAK,SAASO,UAAQ,EAAC/D,QAAQ,WAC/D,cAAC+B,EAAA,EAAKO,KAAN,CACCD,UAAU,cACVrC,QAAQ,uBACRgE,OAAQ1M,EAAU2M,IAAI,WACtBR,QAAS,kBAAM9K,EAAa,UAAU,WAEvC,cAACoJ,EAAA,EAAKO,KAAN,CACCD,UAAU,cACVrC,QAAQ,qBACRgE,OAAQ1M,EAAU2M,IAAI,aACtBR,QAAS,kBAAM9K,EAAa,YAAY,WAEzC,cAACoJ,EAAA,EAAKO,KAAN,CACCD,UAAU,cACVrC,QAAQ,aACRgE,OAAQ1M,EAAU2M,IAAI,OACtBR,QAAS,kBAAM9K,EAAa,MAAM,cAGvC,cAACmL,EAAA,EAAD,CAAQzB,UAAU,cAAcG,GAAG,KAAK0B,UAAU,SAAShC,MAAO,CAAEiC,OAAO,IAAMnE,QAAQ,0BACzF,cAAC,IAAD,CACCqC,UAAU,cACV+B,SAAU,SAACxS,GAAD,OAAU+G,EAAa,YAAY/G,IAC7CgH,MAAOtB,EAAUrC,IAAI,cAAgB,IAAI8E,a,oBCGpC8H,gBA5Ba,SAAC,GAA+B,IAA9B1I,EAA6B,EAA7BA,aAAa7G,EAAgB,EAAhBA,KACvC,OACI,cAAC+R,GAAA,EAAD,CAAMC,YAAU,EAAhB,SAEInL,EAAaoL,KAAI,SAAAvL,GAAW,OACxB,cAACwL,GAAA,EAAD,CACExE,QAAShH,EAAYuB,UACnB,4BAA4BvB,EAAYzG,SAAUyG,EAAYzG,WAAaD,EAAO,2BAClF,UAAU0G,EAAYzG,SAAW,oBACnCgQ,OAAQvJ,EAAYzG,SAEpBoR,KAAK,OACLc,WAAS,EACTC,QACE,cAACL,GAAA,EAAK/B,KAAN,CAAsCE,GAAIe,IAAMZ,GAAE,oBAAe3J,EAAYzG,UAA7E,SACE,cAAC2L,EAAA,EAAD,CAAOyF,KAAK,OAAOgB,UAAQ,EAAC/B,IAAK5J,EAAYvG,OAAU,uBADzCuG,EAAYzG,WAJzByG,EAAYzG,kB,yCCoCpBqS,GArDa,WACxB,OACI,cAAC,WAAD,UACI,eAACC,EAAA,EAAD,CAAMC,QAAS,EAAGC,WAAS,EAA3B,UACA,cAACF,EAAA,EAAKG,OAAN,UACA,cAACC,GAAA,EAAD,CAASC,QAAM,EAAf,SACI,eAACC,GAAA,EAAD,WACA,eAACA,GAAA,EAAYrB,OAAb,CAAoBrR,OAAK,EAAzB,UACI,cAAC0S,GAAA,EAAYC,KAAb,IACA,cAACD,GAAA,EAAYC,KAAb,OAEJ,eAACD,GAAA,EAAYE,UAAb,WACI,cAACF,GAAA,EAAYC,KAAb,CAAkBE,OAAO,WACzB,cAACH,GAAA,EAAYC,KAAb,CAAkBE,OAAO,oBAMjC,cAACT,EAAA,EAAKG,OAAN,UACA,cAACC,GAAA,EAAD,CAASC,QAAM,EAAf,SACI,eAACC,GAAA,EAAD,WACA,eAACA,GAAA,EAAYrB,OAAb,CAAoBrR,OAAK,EAAzB,UACI,cAAC0S,GAAA,EAAYC,KAAb,IACA,cAACD,GAAA,EAAYC,KAAb,OAEJ,eAACD,GAAA,EAAYE,UAAb,WACI,cAACF,GAAA,EAAYC,KAAb,CAAkBE,OAAO,WACzB,cAACH,GAAA,EAAYC,KAAb,CAAkBE,OAAO,oBAMjC,cAACT,EAAA,EAAKG,OAAN,UACA,cAACC,GAAA,EAAD,CAASC,QAAM,EAAf,SACI,eAACC,GAAA,EAAD,WACA,eAACA,GAAA,EAAYrB,OAAb,CAAoBrR,OAAK,EAAzB,UACI,cAAC0S,GAAA,EAAYC,KAAb,IACA,cAACD,GAAA,EAAYC,KAAb,OAEJ,eAACD,GAAA,EAAYE,UAAb,WACI,cAACF,GAAA,EAAYC,KAAb,CAAkBE,OAAO,WACzB,cAACH,GAAA,EAAYC,KAAb,CAAkBE,OAAO,0BC4G9BzD,gBA5IG,WACd,IAAQ/E,EAAkB6E,IAAlB7E,cACA3E,EAAgE2E,EAAhE3E,eAAeoN,EAAiDzI,EAAjDyI,kBAAkB7M,EAA+BoE,EAA/BpE,gBAAgB1H,EAAe8L,EAAf9L,WACzD,EAAqCwU,oBAAS,GAA9C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OANAC,qBAAU,WACPxN,MACD,CAACA,IAKC,eAAC0M,EAAA,EAAD,WACI,cAACA,EAAA,EAAKG,OAAN,CAAapB,MAAM,KAAK1B,MAAO,CAAE2B,UAAW,IAA5C,SACM/G,EAAchF,iBAAmB2N,EAClC,qCACC,cAAC,GAAD,IACA,cAAC,GAAD,OAGF,cAAC,KAAD,CACCG,UAAW,EACXC,SAvBQ,WACjBH,GAAe,GACfhN,EAAgB,IAAIxH,EAAaF,EAAY8U,YAAc,IAC3D3N,IAAiBjD,MAAK,kBAAMwQ,GAAe,OAqBlCK,SAAUN,KAAiBzU,GAAcA,EAAW8U,YAAc9U,EAAWgV,WAC7EC,aAAa,EAJd,SAMEV,EAAkBhB,KAAI,WAAoB2B,GAApB,uBAAEC,EAAF,KAAQ1K,EAAR,YACpB,eAAC,WAAD,WACM,oBAAI4G,UAAU,cAAd,SAA8B8D,IAC9B,cAACC,EAAA,EAAD,UACE3K,EAAW8I,KAAI,SAAC/S,GAAD,iBACf,eAAC6U,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,QAAN,WAEI9U,EAAS4I,aACT,cAACmM,EAAA,EAAD,CACArE,MAAO,CAAEgC,UAAU,SAASjB,SAAU,YACtCc,SAAS,WACTyC,MAAM,MAHN,8BAOJ,cAACtI,EAAA,EAAD,CACIyG,UAAQ,EACR8B,QAAQ,QACR9C,KAAK,OACLf,KAAK,UAAApR,EAASqI,YAAT,eAAeqE,QAAS,sBAE7B,cAACmI,EAAA,EAAKvC,OAAN,CAAazB,UAAU,cAAvB,SAAsC7Q,EAASG,QAC/C,cAAC0U,EAAA,EAAKK,KAAN,UAAYhL,kBAAOlK,EAASI,KAAM,yBAClC,eAACyU,EAAA,EAAKM,YAAN,0BACY,iCACR,cAAC,IAAD,CAAMhE,GAAE,8BAAenR,EAASqI,YAAxB,aAAe,EAAetH,UAAtC,mBAAmDf,EAASqI,YAA5D,aAAmD,EAAerH,gBAGtEhB,EAASoI,SAAWpI,EAAS4I,aAC3B,cAACkI,EAAA,EAAKqE,YAAN,UACK,cAACJ,EAAA,EAAD,CACKrE,MAAO,CAAEe,SAAU,YACnBuD,MAAM,SACNI,OAAO,QAHZ,0CAWNpV,EAASoI,QAAUpI,EAASkI,SAC3B,cAAC4I,EAAA,EAAKqE,YAAN,UACK,cAACJ,EAAA,EAAD,CAEKrE,MAAO,CAAEgC,UAAU,SAASjB,SAAU,YACtCc,SAAS,WACTyC,MAAM,QAJX,mDAYP,cAACK,GAAD,CAA0BvU,KAAMd,EAASqI,KAAKtH,SAAU4G,aAAc3H,EAAS2H,eAC/E,eAACkN,EAAA,EAAKC,QAAN,CAAcQ,OAAK,EAAnB,UAAoB,cAACC,EAAA,EAAD,CAAM5I,KAAK,SAAW3M,EAAS2H,aAAamM,OAAhE,gBACA,eAACe,EAAA,EAAKC,QAAN,CAAcQ,OAAK,EAAnB,UAAoB,cAACC,EAAA,EAAD,CAAM5I,KAAK,QAAS,GAAK3M,EAAS2H,aAAamM,OAAnE,mCAKJ,eAACe,EAAA,EAAKC,QAAN,CAAcQ,OAAK,EAAnB,UAEQtV,EAASoI,OAEL,mCACE,sBAAKyI,UAAU,iBAAf,UACE,cAACU,EAAA,EAAD,CAAQP,GAAIe,IAAMZ,GAAE,sBAAiBnR,EAASC,IAAMuV,OAAK,EAACR,MAAM,QAAQtE,MAAO,CAAEY,YAAY,GAA7F,oBAGA,cAACC,EAAA,EAAD,CAAQU,QAAS,kBAAM3G,EAActD,eAAehI,EAASC,KAAKuV,OAAK,EAACR,MAAM,MAA9E,yBAMR,yCAGR,eAACpE,EAAA,EAAD,CAAWF,MAAO,CAAE2B,UAAW,IAA/B,UACI,eAACwC,EAAA,EAAKK,KAAN,wBAAsBlV,EAASM,YAC/B,eAACuU,EAAA,EAAKK,KAAN,qBAAmBlV,EAASO,QAC5B,eAACsU,EAAA,EAAKK,KAAN,sBAAoBlV,EAASQ,UAC1BR,EAASoI,QACV,cAACmJ,EAAA,EAAD,CAAQP,GAAIe,IAAMZ,GAAE,sBAAiBnR,EAASC,IAC9CuV,OAAK,EAACR,MAAQhV,EAASoI,OAAS,OAAS,QAASsI,MAAO,CAAE2B,UAAW,IADtE,SAEIrS,EAASkI,QAAW,iBAAoB,qBAnF3ClI,EAASC,WAJbyU,UAqGvB,cAACrB,EAAA,EAAKG,OAAN,CAAapB,MAAM,IAAI1B,MAAO,CAAE2B,UAAW,IAA3C,SACI,cAAC,GAAD,Y,sCChIDoD,GAXI,SAACC,GAChB,MAAqBC,aAASD,EAAM/I,MAApC,mBAAOiJ,EAAP,KAAaC,EAAb,KACA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAYhU,MAAO8T,EAAKG,WAAaH,EAAK9T,MAA1C,UACI,gCAAQ2T,EAAMO,QACd,+CAAOpF,UAAU,eAAkB+E,GAAWF,IAC7CG,EAAKG,SAAWH,EAAK9T,MAAQ,cAACgT,EAAA,EAAD,CAAOlD,UAAQ,EAAf,SAAiBgE,EAAK9T,QAAiB,SCalEsO,gBAvBG,WACd,IAAQxN,EAAcsN,IAAdtN,UACR,OACQ,cAAC,KAAD,CACAqT,cAAe,CAAElR,MAAM,GAAGmR,SAAS,GAAGpU,MAAM,MAC5CqU,SAAU,SAAC1M,EAAD,OAAS2M,EAAT,EAASA,UAAT,OAAwBxT,EAAUkJ,MAAMrC,GAAQoD,OAAM,SAAA/K,GAAK,OAAIsU,EAAU,CAACtU,MAAMA,EAAMR,SAAShC,WAFzG,SAIK,gBAAE+W,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,aAAapU,EAA7B,EAA6BA,OAA7B,OACG,eAAC,KAAD,CAAM0O,UAAU,UAAUuF,SAAUE,EAApC,UACI,cAAChE,EAAA,EAAD,CAAQ9D,QAAQ,8BAA8BkE,UAAU,SAAS1B,GAAG,KAAKH,UAAU,gBACnF,cAAC,GAAD,CAAYlE,KAAK,QAAQ6J,YAAY,UACrC,cAAC,GAAD,CAAY7J,KAAK,WAAW6J,YAAY,WAAWC,KAAK,aACxD,cAAC,KAAD,CACE9J,KAAK,QACL+J,OAAQ,kBAAM,cAAC3B,EAAA,EAAD,CAAOrE,MAAO,CAAEiG,aAAa,IAAM9E,UAAQ,EAA3C,SAA8C1P,EAAOJ,WAErE,cAACwP,EAAA,EAAD,CAAQqF,QAASL,EAAcf,OAAK,EAACR,MAAM,OAAOxG,QAAQ,SAASiI,KAAK,SAASI,OAAK,a,mBCC/FC,GAjBU,SAAC,GAAoB,IAAnB3U,EAAkB,EAAlBA,OACvB,OACI,cAAC4U,GAAA,EAAD,CAAShV,OAAK,EAAd,SAEQI,GACA,cAAC4U,GAAA,EAAQlE,KAAT,UAEI1Q,EAAO4Q,KAAI,SAAChR,EAAU2S,GAAX,OACP,cAACqC,GAAA,EAAQjG,KAAT,UAA2B/O,GAAR2S,WC2B5BrE,gBAjCM,WACjB,IAAQxN,EAAcsN,IAAdtN,UACFmU,EAAc,CAChBhW,YAAaiW,OAAaC,WAC1BnW,SAAUkW,OAAaC,WACvBlS,MAAOiS,OAAaC,WAAWlS,QAC/BmR,SAAUc,OAAaC,YAE3B,OACQ,cAAC,KAAD,CACAhB,cAAe,CAAElR,MAAM,GAAGmR,SAAS,GAAGnV,YAAY,GAAGD,SAAS,GAAGgB,MAAM,MACvEqU,SAAU,SAAC1M,EAAD,OAAS2M,EAAT,EAASA,UAAT,OAAwBxT,EAAU4J,SAAS/C,GAAQoD,OAAM,SAAA/K,GAAK,OAAIsU,EAAU,CAACtU,cACvFoV,iBAAkBF,KAAWD,GAH7B,SAKK,gBAAEV,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,aAAapU,EAA7B,EAA6BA,OAAOiV,EAApC,EAAoCA,QAAQC,EAA5C,EAA4CA,MAA5C,OACG,eAAC,KAAD,CAAMxG,UAAU,gBAAgBuF,SAAUE,EAA1C,UACI,cAAChE,EAAA,EAAD,CAAQ9D,QAAQ,gCAAgCkE,UAAU,SAAS1B,GAAG,KAAKH,UAAU,gBACrF,cAAC,GAAD,CAAYlE,KAAK,QAAQ6J,YAAY,UACrC,cAAC,GAAD,CAAY7J,KAAK,cAAc6J,YAAY,iBAC3C,cAAC,GAAD,CAAY7J,KAAK,WAAW6J,YAAY,cACxC,cAAC,GAAD,CAAY7J,KAAK,WAAW6J,YAAY,WAAWC,KAAK,aACxD,cAAC,KAAD,CACE9J,KAAK,QACL+J,OAAQ,kBAAM,cAAC,GAAD,CAAkBvU,OAAQA,EAAOJ,WAEjD,cAACwP,EAAA,EAAD,CAAQ+F,UAAWF,IAAYC,GAASd,EAAcK,QAASL,EAC9Df,OAAK,EAACR,MAAM,OAAOxG,QAAQ,WAAWiI,KAAK,SAASI,OAAK,aCkBnExG,gBA7CF,WACT,MAAkCF,IAA1BtN,EAAR,EAAQA,UAAWsJ,EAAnB,EAAmBA,WACnB,OACI,cAACsH,GAAA,EAAD,CAASjD,UAAQ,EAACkC,UAAU,SAASR,UAAQ,EAACrB,UAAU,WAAxD,SACI,eAACD,EAAA,EAAD,CAAWkB,MAAI,EAAf,UACI,cAACpF,EAAA,EAAD,CAAO6K,cAAc,SAASpE,UAAQ,EAAC/B,IAAI,uBACzCvO,EAAUyN,WAEV,qCACG,oBAAIO,UAAU,cAAd,wCAGD,cAACyB,EAAA,EAAD,CAAQtB,GAAG,KAAKR,UAAQ,EAACK,UAAU,cAAcrC,QAAQ,8DACzD,cAAC+C,EAAA,EAAD,CAAQP,GAAIe,IAAMZ,GAAI,cAAegB,KAAK,QAAQqD,OAAK,EAAChF,UAAQ,EAACwE,MAAM,QAAQnE,UAAU,cAAzF,kCAKA,qCACE,cAACyB,EAAA,EAAD,CAAQtB,GAAG,KAAKR,UAAQ,EAACK,UAAU,cAAcrC,QAAQ,gBACzD,cAAC+C,EAAA,EAAD,CAAQU,QAAS,kBAAM9F,EAAWoC,UAAU,cAAC,GAAD,MAAe4D,KAAK,QAAQqD,OAAK,EAAChF,UAAQ,EAACwE,MAAM,QAAQnE,UAAU,cAA/G,uBAGA,cAACU,EAAA,EAAD,CAAQU,QAAS,kBAAM9F,EAAWoC,UAAU,cAAC,GAAD,MAAkB4D,KAAK,QAAQqD,OAAK,EAAChF,UAAQ,EAACwE,MAAM,QAAQnE,UAAU,cAAlH,sBAGA,cAAC2G,GAAA,EAAD,CAAS1E,YAAU,EAACtC,UAAQ,EAA5B,gBACA,cAACe,EAAA,EAAD,CAAQU,QAAS,kBAAMpP,EAAU+J,iBACzBgK,QAAS/T,EAAUgJ,UACnB2J,OAAK,EACLhF,UAAQ,EACR2B,KAAK,QACL6C,MAAM,WACNnE,UAAU,cANlB,uC,oBC3BT4G,GAAmB,SAAC,GAAkC,IAAD,IAAhCjH,gBAAgC,SAAlBhC,EAAkB,EAAlBA,QAC5C,OACI,cAACkJ,GAAA,EAAD,CAAQlF,QAAQ,EAAMhC,SAAUA,EAAhC,SACI,cAACmH,GAAA,EAAD,UAASnJ,O,UCWNoJ,GAXG,SAAClC,GACf,MAAqBC,aAASD,EAAM/I,MAApC,mBAAOiJ,EAAP,KAAaC,EAAb,KACA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAYhU,MAAO8T,EAAKG,WAAaH,EAAK9T,MAA1C,UACI,gCAAQ2T,EAAMO,QACd,kDAAUpF,UAAU,eAAkB+E,GAAWF,IAChDG,EAAKG,SAAWH,EAAK9T,MAAQ,cAACgT,EAAA,EAAD,CAAOlD,UAAQ,EAAf,SAAiBgE,EAAK9T,QAAiB,S,UCYlE8V,GAlBM,SAACnC,GAElB,MAA6BC,aAASD,EAAM/I,MAA5C,mBAAOiJ,EAAP,KAAaC,EAAb,KAAkBiC,EAAlB,KACA,OACI,eAAChC,GAAA,EAAKC,MAAN,CAAYhU,MAAO8T,EAAKG,WAAaH,EAAK9T,MAA1C,UACI,cAACgW,GAAA,EAAD,CACAC,WAAS,EACTxB,YAAad,EAAMc,YACnByB,QAASvC,EAAMuC,QACf7Q,MAAOwO,EAAMxO,OAAS,KACtBwL,SAAU,SAACsF,EAAM3Y,GAAP,OAAgBuY,EAAQK,SAAS5Y,EAAK6H,QAChDgR,OAAQ,kBAAMN,EAAQO,YAAW,MAEhCxC,EAAKG,SAAWH,EAAK9T,MAAQ,cAACgT,EAAA,EAAD,CAAOlD,UAAQ,EAAf,SAAiBgE,EAAK9T,QAAiB,S,qBCAlEuW,GAfI,SAAC5C,GAChB,MAA6BC,aAASD,EAAM/I,MAA5C,mBAAOiJ,EAAP,KAAaC,EAAb,KAAkBiC,EAAlB,KACA,OACI,eAAChC,GAAA,EAAKC,MAAN,CAAYhU,MAAO8T,EAAKG,WAAaH,EAAK9T,MAA1C,UACI,cAAC,KAAD,uCACK6T,GACAF,GAFL,IAGC6C,SAAW3C,EAAMxO,OAAS,IAAImB,KAAKqN,EAAMxO,QAAW,KACpDwL,SAAU,SAAAxL,GAAK,OAAI0Q,EAAQK,SAAS/Q,OAEpCyO,EAAKG,SAAWH,EAAK9T,MAAQ,cAACgT,EAAA,EAAD,CAAOlD,UAAQ,EAAf,SAAiBgE,EAAK9T,QAAiB,SClBpEyW,GAAmB,CAC5B,CAAC1G,KAAK,SAAS1K,MAAM,UACrB,CAAC0K,KAAK,UAAU1K,MAAM,WACtB,CAAC0K,KAAK,OAAO1K,MAAM,QACnB,CAAC0K,KAAK,OAAO1K,MAAM,QACnB,CAAC0K,KAAK,QAAQ1K,MAAM,SACpB,CAAC0K,KAAK,SAAS1K,MAAM,WC2FViJ,gBAjFD,WACV,IAAQ/E,EAAkB6E,IAAlB7E,cACArD,EAA+DqD,EAA/DrD,aAAa3B,EAAkDgF,EAAlDhF,eAAgBiB,EAAkC+D,EAAlC/D,eAAeM,EAAmByD,EAAnBzD,eAC9C5H,EAAOwY,eAAPxY,GACFoC,EAAUqW,eAKd,EAA+B1E,mBAAuB,IAAIjU,GAA1D,mBAAOC,EAAP,KAAgB2Y,EAAhB,KAEMxB,EAAmBF,KAAW,CAChC9W,MAAO8W,OAAaC,SAAS,2BAC7B9W,KAAK6W,OAAaC,SAAS,0BAA0B0B,WACrDvY,YAAY4W,OAAaC,SAAS,iCAClC5W,SAAS2W,OAAaC,SAAS,8BAC/B3W,KAAK0W,OAAaC,SAAS,0BAC3B1W,MAAMyW,OAAaC,SAAS,6BAGhC/C,qBAAU,WACHlU,GAAIgI,EAAahI,GAAIyD,MAAK,SAAC1D,GAAD,OAAc2Y,EAAY,IAAI5Y,EAAaC,SAC1E,CAACC,EAAGgI,IAqBN,OAAG3B,EAAwB,cAAC,GAAD,CAAkBkI,QAAQ,qCAGjD,eAACoC,EAAA,EAAD,WACI,cAAC0B,EAAA,EAAD,CAAQzB,UAAU,cAAcG,GAAG,KAAnC,gCACA,cAACyC,GAAA,EAAD,CAASoF,UAAQ,EAAjB,SACI,cAAC,KAAD,CACA1B,iBAAkBA,EAClB2B,oBAAkB,EAClB5C,cAAelW,EACfoW,SAAU,SAAC1M,GAAD,OA5BD,SAAC1J,GAClB,GAAIA,EAASC,GAOT0B,QAAQC,IAAI,0BACZiG,EAAe7H,GAAU0D,MAAK,kBAAMrB,EAAQC,KAAR,sBAA4BtC,EAASC,YAR7D,CACZ,IAAIwH,EAAW,2BACRzH,GADQ,IACCC,GAAG8Y,iBAEnBxR,EAAeE,GAAa/D,MAAK,kBAAMrB,EAAQC,KAAR,sBAA4BmF,EAAYxH,SAuBrDqW,CAAa5M,IAJnC,SAKK,gBAAE4M,EAAF,EAAEA,aAAcc,EAAhB,EAAgBA,QAAQb,EAAxB,EAAwBA,aAAac,EAArC,EAAqCA,MAArC,OACG,eAAC,KAAD,CAAMxG,UAAU,sBAAsBuF,SAAUE,EAAhD,UACI,cAAChE,EAAA,EAAD,CAAQH,KAAK,QAAQtB,UAAU,cAA/B,8BACA,cAAC,GAAD,CAAYlE,KAAK,QAAQ6J,YAAY,UACrC,cAAC,GAAD,CAAWwC,KAAM,EAAGxC,YAAY,cAAc7J,KAAK,gBACnD,cAAC,GAAD,CAAcsL,QAASO,GAAkBhC,YAAY,uBAAwB7J,KAAK,aAClF,cAAC,GAAD,CACIsM,gBAAgB,OAChBC,gBAAc,EACdC,YAAY,OACZC,WAAW,uBACXzM,KAAK,SAET,cAAC2F,EAAA,EAAD,CAAQH,KAAK,QAAQtB,UAAU,cAA/B,8BACA,cAAC,GAAD,CAAY2F,YAAY,OAAO7J,KAAK,SACpC,cAAC,GAAD,CAAY6J,YAAY,QAAQ7J,KAAK,UACrC,cAAC4E,EAAA,EAAD,CAAQ+F,SAAUf,IAAiBc,IAAUD,EAC7CvG,UAAU,cAAc+F,QAASL,EAActB,QAAQ,QAAQzD,UAAQ,EAACiF,KAAK,SAD7E,oBAEA,cAAClF,EAAA,EAAD,CAAQP,GAAIe,IAAMlB,UAAU,cAAcM,GAAI,eAAgB8D,QAAQ,QAAQwB,KAAK,SAAnF,kCCFbpG,gBA3EQ,SAAC,GAAsB,IAArBrQ,EAAoB,EAApBA,SACbsL,EAAkB6E,IAAlB7E,cAcR,OACK,eAACmI,GAAA,EAAQ4F,MAAT,WACG,eAAC5F,GAAA,EAAD,CAAS+B,OAAK,EAACjD,SAAS,MAAM7B,MAAO,CAAC4I,QAAS,KAA/C,UAEQtZ,EAAS4I,aACT,cAACmM,EAAA,EAAD,CACGrE,MAAO,CAAEe,SAAU,WAAW8H,OAAO,IAAKC,KAAK,GAAGC,IAAI,IACtDzE,MAAM,MACNI,OAAO,QAHV,wBAOJ,cAAC1I,EAAA,EAAD,CAAO0E,IAAK,uBAAwByF,OAAK,EAACnG,MAzB3B,CACvBjI,OAAQ,qBAyBA,cAACgL,GAAA,EAAD,CAAS/C,MAtBU,CAC3Be,SAAU,WACViI,OAAQ,KACRF,KAAM,KACNpH,MAAO,OACPuH,OAAQ,OACR3E,MAAO,SAgByCQ,OAAK,EAA7C,SACI,cAAC1E,EAAA,EAAKuI,MAAN,UACI,cAACvI,EAAA,EAAD,UACI,eAACA,EAAA,EAAKgE,QAAN,WACI,cAACxC,EAAA,EAAD,CACIH,KAAK,OACL3D,QAASxO,EAASG,MAClBuQ,MAAO,CAACsE,MAAO,SACfnE,UAAU,gBAEd,4BAAI3G,kBAAOlK,EAASI,KAAM,yBAC1B,2CACc,iCAASJ,EAAS0H,8BAOpD,cAAC+L,GAAA,EAAD,CAASoF,UAAQ,EAACtG,SAAS,SAA3B,SAGQvS,EAASoI,OAEP,qCACE,cAACmJ,EAAA,EAAD,CACIiE,OAAK,EAACvD,QAAS3G,EAAc3C,eAAgBiO,QAAStL,EAAcjF,QACpE2O,MAAShV,EAAS4I,YAAc,QAAU,QAASqM,QAAQ,OAAOpE,UAAU,cAFhF,SAGM7Q,EAAS4I,YAAc,oBAAsB,iBAEnD,cAAC2I,EAAA,EAAD,CAAQ+F,SAAUtX,EAAS4I,YAAaoI,GAAIe,IAAMZ,GAAE,kBAAanR,EAASC,IAAM+U,MAAM,SAASC,QAAQ,QAAQpE,UAAU,cAAzH,6BAIA7Q,EAASkI,QACX,cAACqJ,EAAA,EAAD,CACEqF,QAAStL,EAAcjF,QACvB4L,QAAS3G,EAAc9C,iBAAkBqI,UAAU,cAFrD,+BAGC,cAACU,EAAA,EAAD,CAAQ+F,SAAUtX,EAAS4I,YAC3BgO,QAAStL,EAAcjF,QAAS4L,QAAS3G,EAAc9C,iBAAkBwM,MAAM,OAAOnE,UAAU,cADhG,mCCnDRR,gBAvBa,WACxB,OACI,eAACO,EAAA,EAAD,CAAWF,MAAO,CAAE2B,UAAU,QAA9B,UACI,4CACA,cAACmF,GAAA,EAAD,IACA,y4B,oBC6EGnH,gBAxEM,SAAC,GAAwB,IAAvBvB,EAAsB,EAAtBA,WACXJ,EAAkByB,IAAlBzB,aAMR,OALAyF,qBAAU,WAGN,OAFGrF,GACAJ,EAAaG,iBAAiBC,GAC1B,kBAAMJ,EAAaoB,mBAC5B,CAACpB,EAAaI,IAEZ,eAAC8B,EAAA,EAAD,CAAWF,MAAO,CAAEiG,aAAa,IAAjC,UACI,cAACa,GAAA,EAAD,IACA,yCACA,eAACoC,GAAA,EAAQP,MAAT,WACM3K,EAAaC,SAASoE,KAAI,SAAAtD,GAAO,OAC/B,eAACmK,GAAA,EAAD,WACI,cAACA,GAAA,EAAQC,OAAT,CAAgBzI,IAAK3B,EAAQxO,OAAQ,sBACrC,eAAC2Y,GAAA,EAAQ9E,QAAT,WACI,cAAC8E,GAAA,EAAQE,OAAT,CAAgB9I,GAAIe,IAAMZ,GAAE,oBAAe1B,EAAQ1O,UAAnD,SAAiE0O,EAAQzO,cACzE,cAAC4Y,GAAA,EAAQG,KAAT,CAAcrJ,MAAO,CAAEsJ,WAAW,YAAlC,SAAiDvK,EAAQ9L,OACzD,cAACiW,GAAA,EAAQK,SAAT,UAAmBC,aAAoBzK,EAAQC,kBALzCD,EAAQxP,OAS1B,eAAC2Z,GAAA,EAAD,WACA,cAACA,GAAA,EAAQC,OAAT,CAAgB7I,GAAG,IAAII,IAAK,sBAC5B,eAACwI,GAAA,EAAQ9E,QAAT,WACI,cAAC8E,GAAA,EAAQE,OAAT,wBACA,cAACF,GAAA,EAAQG,KAAT,wFAIA,cAACH,GAAA,EAAQK,SAAT,kCAIR,cAAC,KAAD,CACC7D,SAAU,SAAC1M,EAAD,OAASyQ,EAAT,EAASA,UAAT,OAAwBzL,EAAaqB,WAAWrG,GAAQhG,MAAK,kBAAMyW,QAC7EjE,cAAiB,CAAEvS,KAAK,IACxBwT,iBACIF,KAAW,CACPtT,KAAKsT,OAAaC,aAL3B,SASK,gBAAEX,EAAF,EAAEA,aAAaa,EAAf,EAAeA,QAAQd,EAAvB,EAAuBA,aAAvB,OACG,cAAC,KAAD,CAAMzF,UAAU,UAAhB,SACI,cAAC,KAAD,CAAOlE,KAAK,OAAZ,SAAqB,SAAC+I,GAAD,OACjB,sBAAKhF,MAAO,CAACe,SAAS,YAAtB,UACI,cAACkG,GAAA,EAAD,CAAQnF,OAAQ+D,IAChB,kDACA1F,UAAU,cACV2F,YAAY,wDACZwC,KAAM,GACFtD,EAAME,OAJV,IAKAwE,WAAY,SAACC,GACI,UAAVA,EAAE7X,KAAmB6X,EAAEC,UAEb,UAAVD,EAAE7X,KAAoB6X,EAAEC,WACxBD,EAAEE,iBACFnD,GAAWd,0BChBnCjG,gBA9CS,SAAC,GAA2C,IAAD,IAAzCrQ,SAAU2H,EAA+B,EAA/BA,aAAaU,EAAkB,EAAlBA,KAC7C,OAAIV,EAEA,qCACA,eAAC8L,GAAA,EAAD,CACIf,UAAU,SACVhC,MAAO,CAAE8J,OAAQ,OAAOnI,UAAU,QAClCE,SAAS,MACTkI,WAAS,EACTjK,UAAQ,EALZ,UAO2B,IAAzB7I,EAAcmM,OAAe,kBAA7B,UAAoDnM,EAAcmM,OAAlE,WAPF,YASA,eAACL,GAAA,EAAD,CAASlB,UAAQ,EAAC/B,UAAQ,EAA1B,UACA,mBAAGE,MAAO,CAAE2B,UAAU,QAAtB,4CACI,cAACQ,GAAA,EAAD,CAAM6H,SAAO,EAACC,SAAO,EAACC,UAAQ,EAACrD,cAAc,SAA7C,SAEI5P,EAAcoL,KAAK,SAAAvL,GAAW,OAC1B,eAACqL,GAAA,EAAK/B,KAAN,YAEW,OAAJzI,QAAI,IAAJA,OAAA,EAAAA,EAAMtH,YAAayG,EAAYzG,UAC/B,cAACgU,EAAA,EAAD,CACArE,MAAO,CAAEe,SAAU,YACnBuD,MAAM,SACNI,OAAO,QAHP,kBAQH,cAAC1I,EAAA,EAAD,CAAOgF,QAAM,EAACN,IAAK5J,EAAYvG,OAAS,sBACxC,eAAC4R,GAAA,EAAKiC,QAAN,WACI,cAACjC,GAAA,EAAKP,OAAN,CAAazB,UAAU,cAAvB,SAAqC,cAAC,IAAD,CAAMM,GAAE,oBAAe3J,EAAYzG,UAAnC,SAAgDyG,EAAYxG,iBAC1F,OAAJqH,QAAI,IAAJA,OAAA,EAAAA,EAAMtH,YAAayG,EAAYzG,SAAW,eAAiB,QAC3DyG,EAAYuB,WAAa,cAACgM,EAAA,EAAD,CAAOC,MAAM,OAAb,4BAfpBxN,EAAYzG,qBAjBnB,QC2BdsP,gBA1BC,WACZ,IAAQ/E,EAAkB6E,IAAlB7E,cACArD,EAAsEqD,EAAtErD,aAAa3B,EAAyDgF,EAAzDhF,eAAeC,EAA0C+E,EAA1C/E,gBAAgBsC,EAA0ByC,EAA1BzC,qBAC9C5I,EAAOwY,eAAPxY,GAON,OALAkU,qBAAU,WAEN,OADGlU,GAAIgI,EAAahI,GACb,kBAAM4I,OACf,CAAC5I,EAAGgI,EAAaY,IAEhBvC,IAAmBC,EAAyB,cAAC,GAAD,CAAkBiI,QAAQ,wBAGrE,eAAC6E,EAAA,EAAD,WACI,eAACA,EAAA,EAAKG,OAAN,CAAapB,MAAM,KAAnB,UACG,cAAC,GAAD,CAAgBpS,SAAUsL,EAAc/E,kBACxC,cAAC,GAAD,IACA,cAAC,GAAD,CAAcuI,WAAYxD,EAAc/E,gBAAiBtG,QAE5D,cAACoT,EAAA,EAAKG,OAAN,CAAapB,MAAM,IAAnB,SACG,cAAC,GAAD,CAAiBpS,SAAUsL,EAAc/E,0BChBzCsU,I,OAbE,WACb,OACI,cAACpH,GAAA,EAAD,CAASf,UAAU,SAASR,UAAQ,EAApC,SACG,eAACtB,EAAA,EAAD,WACA,cAAC0B,EAAA,EAAD,CAAQzB,UAAU,cAAlB,yDACC,cAACU,EAAA,EAAD,CAAQP,GAAIe,IAAMZ,GAAI,cAAegB,KAAK,QAAQ6C,MAAM,QAAQnE,UAAU,cAA1E,uCCcGR,gBAjBK,WAAO,IAAD,IACdtN,EAAgBoN,IAAhBpN,YACR,OACI,eAAC6N,EAAA,EAAD,CAAW8B,UAAU,SAArB,UACI,cAACJ,EAAA,EAAD,CAAQtB,GAAG,KAAKH,UAAU,cAA1B,0BACA,cAACyB,EAAA,EAAD,CAAQtB,GAAG,KAAKH,UAAU,cAA1B,mBAAyC9N,EAAYhB,aAArD,aAAyC,EAAmB2G,WAExD,UAAA3F,EAAYhB,aAAZ,eAAmB+Y,UACnB,eAACrH,GAAA,EAAD,WACI,cAACnB,EAAA,EAAD,CAAQtB,GAAG,KAAKH,UAAU,cAA1B,yBACA,sBAAMH,MAAO,CAAE2B,UAAU,QAAUxB,UAAU,cAA7C,SAA4D9N,EAAYhB,MAAM+Y,mB,UCKnFzK,gBAfQ,WACnB,IAAQlE,EAAegE,IAAfhE,WACR,OACI,cAAC4O,GAAA,EAAD,CACGzM,KAAMnC,EAAWkC,MAAMC,KACvB0M,QAAS7O,EAAWC,WACpB+F,KAAK,OAHR,SAKI,cAAC4I,GAAA,EAAMjG,QAAP,UACK3I,EAAWkC,MAAM1K,Y,kDC0BnBsX,GA/BW,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,SAClBC,EAAgB,CAClBX,OAAO,kBACPY,YAAY,OACZC,aAAa,MACbC,WAAW,OACX5I,UAAU,SACViH,OAAO,KAOL4B,EAASC,uBAAY,SAAAC,GACvBP,EAASO,EAAc1I,KAAI,SAACzN,GAAD,OAAc3E,OAAOC,OAAO0E,EAAK,CACxDoW,QAAQC,IAAIC,gBAAgBtW,SAEhC3D,QAAQC,IAAI6Z,KACX,CAACP,IACJ,EAAoDW,aAAY,CAACN,WAA1DO,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,aAEpC,OACE,gDAASF,KAAT,IAAyBpL,MAAQsL,EAAY,2BAb1B,CACnBZ,YAAY,UAY0DD,GAAiBA,EAAvF,UACE,qCAAWY,MACX,cAACxG,EAAA,EAAD,CAAM5I,KAAK,SAASwF,KAAK,SACzB,cAACG,EAAA,EAAD,CAAQzB,UAAU,cAAcrC,QAAQ,6B,UCPnCyN,I,OAlBY,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,aAAaC,EAAsB,EAAtBA,WAEtC,OACI,cAAC,KAAD,CACC/K,IAAK8K,EACLxL,MAAO,CAAEiJ,OAAO,IAAIvH,MAAM,QAC1BgK,mBAAoB,EACpBC,SAAU,EACVC,YAAa,EACbZ,QAAQ,eACRa,QAAQ,EACRC,aAAc,EACdC,YAAY,EACZC,cAAe,SAAAC,GAAO,OAAIR,EAAWQ,QCX/B,SAASC,GAAT,GAAoD,IAA9BvX,EAA6B,EAA7BA,YAAYwX,EAAiB,EAAjBA,UAC7C,EAAyB7I,mBAAc,IAAvC,mBAAO8I,EAAP,KAAa5B,EAAb,KACA,EAA6BlH,qBAA7B,mBAAO2I,EAAP,KAAeR,EAAf,KAaA,OANAhI,qBAAU,WAEN,OAAO,WACH2I,EAAM/V,SAAQ,SAACzB,GAAD,OAAcqW,IAAIoB,gBAAgBzX,EAAK0X,eAE3D,CAACF,IAEC,eAAClM,EAAA,EAAD,CAAWF,MAAO,CAAE2B,UAAU,IAA9B,UACE,eAAC4K,GAAA,EAAK5D,MAAN,CAAY6D,SAAO,EAACxM,MAAO,CAAE8J,OAAO,QAApC,UACE,cAACyC,GAAA,EAAD,UACA,cAACA,GAAA,EAAKnI,QAAN,CAActG,QAAQ,wBAEtB,cAACyO,GAAA,EAAD,UACA,cAACA,GAAA,EAAKnI,QAAN,CAActG,QAAQ,8BAEtB,cAACyO,GAAA,EAAD,UACA,cAACA,GAAA,EAAKnI,QAAN,CAActG,QAAQ,0BAG1B,eAAC6E,EAAA,EAAD,CAAM3C,MAAO,CAAEyM,WAAW,IAA1B,UACI,cAAC9J,EAAA,EAAKG,OAAN,CAAapB,MAAO,EAApB,SACI,cAAC,GAAD,CAAmB8I,SAAUA,MAEjC,cAAC7H,EAAA,EAAKG,OAAN,CAAapB,MAAO,IACpB,cAACiB,EAAA,EAAKG,OAAN,CAAapB,MAAO,EAApB,SAEQ0K,GAASA,EAAMhJ,OAAS,GAAK,cAAC,GAAD,CAAoBqI,WAAYA,EAAYD,aAAeY,EAAM,GAAGpB,YAGzG,cAACrI,EAAA,EAAKG,OAAN,CAAapB,MAAO,IACpB,cAACiB,EAAA,EAAKG,OAAN,CAAapB,MAAO,EAApB,SACK0K,GAASA,EAAMhJ,OAAS,GACrB,qCACI,qBAAKjD,UAAU,cAAcH,MAAO,CAAE0M,UAAU,IAAIC,SAAS,SAAUF,WAAW,MAClF,eAAC5L,EAAA,EAAO8H,MAAR,CAAciE,OAAQ,EAAG5M,MAAO,CAAEyM,WAAW,IAA7C,UACI,cAAC5L,EAAA,EAAD,CAAQqF,QAASiG,EAAW5K,QAzCrC,WACR0K,GACCA,EAAQY,mBAAmBC,QAAO,SAAAC,GAAI,OAAIpY,EAAYoY,OAuCOjM,UAAQ,EAACQ,KAAK,UAC3D,cAACT,EAAA,EAAD,CAAQ+F,SAAUuF,EAAW5K,QAAS,kBAAMiJ,EAAS,KAAKlJ,KAAK,wBC7C5E3B,oBAAS,YAAwC,IAAD,EAAfpK,EAAe,EAAfA,QACpCwI,EAAiB0B,IAAjB1B,aACAiP,EAAqEjP,EAArEiP,cAAerY,EAAsDoJ,EAAtDpJ,YAAYgF,EAA0CoE,EAA1CpE,UAAUhE,EAAgCoI,EAAhCpI,QAAQ6E,EAAwBuD,EAAxBvD,QAAQvF,EAAgB8I,EAAhB9I,YAC7D,EAAuCqO,oBAAS,GAAhD,mBAAO2J,EAAP,KAAoBC,EAApB,KAIA,EAA2B5J,mBAAS,IAApC,mBAAO6J,EAAP,KAAcC,EAAd,KAUA,OACI,gCACG,cAACjJ,EAAA,EAAKwE,MAAN,CAAY0E,YAAa,EAAzB,mBACG9X,EAAQ8E,cADX,aACG,EAAgBgI,KAAI,SAAAjI,GAAK,OACvB,cAAC+J,EAAA,EAAD,UAII6I,GACA,qCACI,cAAChR,EAAA,EAAD,CAAO0E,IAAKtG,EAAMtH,KAAQ,sBAC1B,eAAC+N,EAAA,EAAO8H,MAAR,CAAcxC,OAAK,EAACyG,OAAQ,EAA5B,UACQ,cAAC/L,EAAA,EAAD,CACAyD,MAAQ,SACR4B,QAASvQ,GAAWwX,IAAW/S,EAAM7K,GAAG,WAAYuV,OAAK,EAAC7I,KAAM7B,EAAM7K,GAAG,WAAYqX,SAAUxM,EAAMK,YACrG8G,QAAS,SAAAoI,GAAC,OAxBX,SAACvP,EAAYuP,GACpCyD,EAAUzD,EAAE2D,cAAcrR,MAC1BzB,EAAQJ,GAsB8BmT,CAAmBnT,EAAMuP,IAAIrI,KAAK,UAChD,cAACT,EAAA,EAAD,CACAiE,OAAK,EAACR,MAAM,MAAM4B,QAASvQ,GAAWwX,IAAW/S,EAAM7K,GAAIqX,SAAUxM,EAAMK,YAAawB,KAAM7B,EAAM7K,GACpGgS,QAAS,SAAAoI,GAAC,OAtBZ,SAACvP,EAAYuP,GACnCyD,EAAUzD,EAAE2D,cAAcrR,MAC1BhH,EAAYmF,GAoB0BoT,CAAkBpT,EAAMuP,IAAIrI,KAAK,iBAb1DlH,EAAM7K,SAsBd0d,GACA,cAACf,GAAD,CAAavX,YAzCI,SAACC,GACvBD,EAAYC,GAAM5B,MAAK,kBAAMka,GAAgB,OAwCKf,UAAWxS,IAGxDqT,GACA,cAACnM,EAAA,EAAD,CACCiE,OAAK,EAACR,MAAM,OAAO/C,QAAS,kBAAM2L,GAAiBD,IACnD9G,OAAK,EAACnG,MAAO,CAAE2B,UAAU,IAF1B,SAEiCsL,EAAe,SAAW,2BCzDzDtN,gBAAS,WACpB,IAAQ5B,EAAiB0B,IAAjB1B,aACAnE,EAAemE,EAAfnE,WAER,OACI,8BACI,cAACuK,EAAA,EAAKwE,MAAN,CAAY0E,YAAa,EAAzB,SACEzT,EAAWwJ,OAAS,EAAIxJ,EAAWyI,KAAI,SAAA9M,GAAO,OACxC,cAAC4O,EAAA,EAAD,UAGA,qCACQ,cAACnI,EAAA,EAAD,CAAO0E,IAAKnL,EAAQhF,OAAU,sBAC9B,eAAC4T,EAAA,EAAKC,QAAN,WACI,cAACD,EAAA,EAAKvC,OAAN,CAAazB,UAAU,cAAvB,SAAsC5K,EAAQjF,cAC9C,cAAC6T,EAAA,EAAKK,KAAN,UACI,sBAAMrE,UAAU,OAAhB,8BAEJ,cAACgE,EAAA,EAAKM,YAAN,UACKlP,EAAQkY,IAAMlY,EAAQkY,IAAMlY,EAAQjF,YAAY,2CAGrD,cAAC6T,EAAA,EAAKC,QAAN,CAAcQ,OAAK,EAAnB,SACA,kCAAKrP,EAAQ+C,eAAb,mBAEJ,cAACuI,EAAA,EAAD,CACIP,GAAIe,IACJZ,GAAE,oBAAelL,EAAQlF,UACzByU,OAAK,EACL9E,MAAS,CAAE2B,UAAU,GACrB2C,MAAQ,SACRxG,QAAU,qBAtBjBvI,EAAQlF,aA0BrB,8BACC,cAACuR,EAAA,EAAD,CACKtB,GAAG,KACHH,UAAU,cACVH,MAAS,CAAEiC,OAAO,IAClBD,UAAU,SACVlE,QAAO,8BAAoD,IAA3BC,EAAajE,UAAmB,aAAa,YAAtE,uBCaV6F,gBAnDU,WACrB,MAAgGF,IAAzF1B,aAAgBhD,EAAvB,EAAuBA,sBAAsBxF,EAA7C,EAA6CA,QAAQwE,EAArD,EAAqDA,eAAe3E,EAApE,EAAoEA,UAAUqB,EAA9E,EAA8EA,aAM9E,OAJAgN,qBAAU,WACN1I,EAAsBxF,EAASlF,YACjC,CAAC0K,EAAsBxF,EAAQH,IAG7B,qCACG,qBAAK4K,MAAO,CAAE2B,UAAU,IAAxB,SACA,gCACK,cAACd,EAAA,EAAD,CAAQU,QAAS,kBAAM9K,EAAa,SACjCqO,OAAK,EAACR,MAAM,OAAOtE,MAAO,CAAEY,YAAY,GAAK9C,QAAQ,gBACxD,cAAC+C,EAAA,EAAD,CAAQU,QAAS,kBAAM9K,EAAa,WACjCqO,OAAK,EAACR,MAAM,OAAOtE,MAAO,CAAEY,YAAY,GAAK9C,QAAQ,oBACxD,cAAC+C,EAAA,EAAD,CAAQU,QAAS,kBAAM9K,EAAa,YACjCqO,OAAK,EAACR,MAAM,OAAOtE,MAAO,CAAEY,YAAY,GAAK9C,QAAQ,wBAG7D,cAAC8D,EAAA,EAAD,CACOtB,GAAG,KACHH,UAAU,cACVH,MAAS,CAAEiC,OAAO,IAClBD,UAAU,SACVlE,QAAW/D,EAAeqJ,OAAS,EAAI,iCAAmC,sBAClF,cAACc,EAAA,EAAD,CAAWmJ,YAAa,EAAxB,SAEItT,EAAesI,KAAI,SAAC/S,GAAD,OACjB,eAAC6U,EAAA,EAAD,CAEA7D,GAAIe,IACJZ,GAAE,sBAAiBnR,EAASC,IAH5B,UAKA,cAACyM,EAAA,EAAD,CAAO0E,IAAK,0BAA2BgN,SAAO,EAACC,IAAI,IACnD,eAACxJ,EAAA,EAAKC,QAAN,WACA,cAACD,EAAA,EAAKvC,OAAN,CAAazB,UAAU,cAAvB,SAAsC7Q,EAASG,QAC/C,cAAC0U,EAAA,EAAKK,KAAN,UACI,sBAAMrE,UAAU,OAAhB,SAAwB3G,kBAAO,IAAI3B,KAAKvI,EAASI,MAAM,cAE3D,cAACyU,EAAA,EAAKM,YAAN,UACKnV,EAASM,gBAXTN,EAASC,eCGfoQ,gBA3BK,SAAC,GAAyB,IAAxBiO,EAAuB,EAAvBA,YAClB,EAAiDnO,IAA1C1B,aAAexI,EAAtB,EAAsBA,QAASD,EAA/B,EAA+BA,cAE/B,OACI,cAAC,KAAD,CACCkQ,cAAe,CAAClV,YAAW,OAAEiF,QAAF,IAAEA,OAAF,EAAEA,EAASjF,YAAamd,IAAG,OAAClY,QAAD,IAACA,OAAD,EAACA,EAASkY,KAChE/H,SAAU,SAAA1M,GAAY1D,EAAc0D,GAAQhG,MAAK,WAAO4a,GAAY,OACpEnH,iBAAkBF,KAAW,CAACjW,YAAaiW,OAAaC,aAHzD,SAKK,gBAAEX,EAAF,EAAEA,aAAca,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,MAAzB,OACK,eAAC,KAAD,CAAMxG,UAAU,UAAhB,UACM,cAAC,GAAD,CAAY2F,YAAY,eAAc7J,KAAK,gBAC3C,cAAC,GAAD,CAAWqM,KAAM,EAAGxC,YAAY,eAAe7J,KAAK,QACpD,cAAC4E,EAAA,EAAD,CACEC,UAAQ,EACRiF,KAAK,SACLG,QAASL,EACT/H,QAAQ,iBACRyG,QAAQ,QACRqC,UAAWF,IAAYC,aCAlChH,gBA3BM,WACjB,MAAgC2D,oBAAS,GAAzC,mBAAOuK,EAAP,KAAiBD,EAAjB,KACA,OACI,cAACjL,EAAA,EAAD,UACI,eAACA,EAAA,EAAKG,OAAN,CAAapB,MAAM,KAAnB,UACA,cAACE,EAAA,EAAD,CACMtB,GAAG,KACHH,UAAU,cACVH,MAAS,CAAEiC,OAAO,IAClBD,UAAU,SACVlE,QAAS,mCACT,cAAC+C,EAAA,EAAD,CACM0D,QAAQ,QACRD,MAAM,OACNtE,MAAO,CAAEiC,OAAO,IAChB6C,OAAK,EACLhH,QAAS+P,EAAW,SAAW,eAC/BtM,QAAS,kBAAMqM,GAAaC,MAElC,cAAClL,EAAA,EAAKG,OAAN,CAAapB,MAAM,KAAnB,SACQmM,EAAW,cAAC,GAAD,CAAaD,YAAaA,IAAkB,mDCalEjO,gBA1BQ,SAAC,GAAqB,IAApBpK,EAAmB,EAAnBA,QACrB,EAA6CkK,IAArC1B,EAAR,EAAQA,aAAyB3N,EAAjC,EAAqB+B,UAAY/B,KAG7B0d,EAAQ,CACR,CAAEC,SAAU,OAAQ/H,OAAQ,kBAAU,OAAJ5V,QAAI,IAAJA,OAAA,EAAAA,EAAMC,YAAakF,EAAQlF,SAAY,cAAC,GAAD,IAAkB,2CAC3F,CAAE0d,SAAU,SAAU/H,OAAQ,kBAAM,cAAC,GAAD,MACpC,CAAE+H,SAAU,SAAU/H,OAAQ,kBAAM,cAACgI,GAAA,EAAIC,KAAL,CAAU9N,UAAU,cAApB,SAAkC,cAAC,GAAD,CAAe5K,QAASA,QAC9F,CAAEwY,SAAU,YAAa/H,OAAQ,kBAAM,cAACgI,GAAA,EAAIC,KAAL,CAAU/H,QAASnI,EAAalE,kBAAmBsG,UAAU,cAA7D,SAA2E,cAAC,GAAD,QAClH,CAAE4N,SAAU,YAAa/H,OAAQ,kBAAM,cAACgI,GAAA,EAAIC,KAAL,CAAU/H,QAASnI,EAAalE,kBAAmBsG,UAAU,cAA7D,SAA2E,cAAC,GAAD,SAMtH,OACI,sBAAKH,MAAO,CAAEiC,OAAO,IAArB,UACG,oBAAI9B,UAAU,cAAd,iBAGA,4BAAI5K,EAAQkY,IAAMlY,EAAQkY,IAlBnB,gQAmBP,cAACO,GAAA,EAAD,CAAKF,MAAOA,EAAOI,YAAa,SAACvE,EAAE9a,GAAH,OAAYkP,EAAa/D,aAAanL,EAAKsf,sBCqKvExO,gBA7LO,SAAC,GAAqB,IAApBpK,EAAmB,EAAnBA,QACdnF,EAAO8B,EAAMC,UAAU/B,KACrB2N,EAAiB0B,IAAjB1B,aAYFqQ,EAAY,CACd9J,MAAM,SAOV,OACI,mCACI,eAAC3B,EAAA,EAAD,CAAO3C,MAAO,CAAE2B,UAAU,GAAGsE,aAAa,IAA1C,UACI,eAACtD,EAAA,EAAKG,OAAN,CAAapB,MAAO,GAApB,UACI,qCACA,cAAC1F,EAAA,EAAD,CAAO0E,IAAK,0BAA2ByF,OAAK,EAACnG,MAAO,CAAE8J,OAAO,OAAOb,OAAO,QAAQ0B,aAAa,MAChG,cAAC0D,GAAA,EAAD,CAAWrO,MAtBH,CACpBe,SAAU,WACVgI,IAAK,KACLD,KAAM,MACNpH,MAAO,OACPuH,OAAQ,OACRa,OAAO,QAgBK,SACI,eAAC1J,EAAA,EAAD,WACI,cAACA,EAAA,EAAKpE,MAAN,CAAYgF,QAAM,EAACS,KAAK,QAAQf,IAAKnL,EAAQhF,OAAS,sBACtD,eAAC6P,EAAA,EAAKgE,QAAN,CAAcyC,cAAc,SAAS7G,MAAOoO,EAA5C,UACI,eAACxM,EAAA,EAAD,CAAQtB,GAAG,KAAKH,UAAU,cAAcH,MAfhD,CAChBiG,aAAa,GACbtE,UAAU,GACV2C,MAAM,SAYkB,cAA8D/O,EAAQjF,YAAtE,OACA,oBAAG0P,MAAOoO,EAAV,UAAqB,cAACvJ,EAAA,EAAD,CAAM5I,KAAK,aAAc1G,EAAQjF,YAAtD,gBACA,oBAAG0P,MAAOoO,EAAV,UAAqB,cAACvJ,EAAA,EAAD,CAAM5I,KAAK,UAAhC,mBACA,oBAAG+D,MAAOoO,EAAV,UAAqB,cAACvJ,EAAA,EAAD,CAAM5I,KAAK,uBAAhC,oBACA,oBAAG+D,MAAOoO,EAAV,UAAqB,cAACvJ,EAAA,EAAD,CAAM5I,KAAK,cAAhC,eACA,eAACkG,GAAA,EAAD,CAAMC,YAAU,EAAhB,UACI,cAACD,GAAA,EAAK/B,KAAN,UACG,oBAAGJ,MAAOoO,EAAV,UAAqB,cAACvJ,EAAA,EAAD,CAAM5I,KAAK,SAAU1G,EAAQ+C,eAAiB,EAAI/C,EAAQ+C,eAC/E,aAAe/C,EAAQ+C,eAAiB,iBAE3C,cAAC6J,GAAA,EAAK/B,KAAN,UACG,oBAAGJ,MAAOoO,EAAV,UAAqB,cAACvJ,EAAA,EAAD,CAAM5I,KAAK,SAAU1G,EAAQ+Y,eAAiB,EAAI/Y,EAAQ+Y,eAC/E,cAAgB/Y,EAAQ+Y,eAAiB,kBAE5C,cAACnM,GAAA,EAAK/B,KAAN,UACG,oBAAGJ,MAAOoO,EAAV,UAAqB,cAACvJ,EAAA,EAAD,CAAM5I,KAAK,gBAAhC,2BAIH1G,EAAQlF,YAAR,OAAqBD,QAArB,IAAqBA,OAArB,EAAqBA,EAAMC,WAC3B,cAACwQ,EAAA,EAAD,CACAU,QAAS,WAjDrChM,EAAQ8C,UAAY0F,EAAapD,gBAAgBpF,EAAQlF,UAAS,GAAS0N,EAAapD,gBAAgBpF,EAAQlF,UAAS,IAkD7F8V,OAAK,EACL7B,MAAM,OACNxG,QAAWvI,EAAQ8C,UAAY,YAAc,SAC7C8H,UAAU,cACVH,MAAO,CAACuO,gBAAgB,OAAOC,YAAY,GAAGC,aAAa,GAAG/M,MAAM,MAAMO,OAAO,iBAQjG,cAAC,GAAD,CAAgB1M,QAASA,OAE7B,eAACoN,EAAA,EAAKG,OAAN,CAAapB,MAAO,EAApB,UACK,eAACyC,EAAA,EAAD,CAAMnE,MAAO,CAAE0B,MAAM,QAArB,UACG,cAACyC,EAAA,EAAKC,QAAN,UACA,cAACD,EAAA,EAAKvC,OAAN,CAAazB,UAAU,cAAvB,mCAEA,cAACgE,EAAA,EAAKC,QAAN,UACA,eAACsK,GAAA,EAAD,WACA,eAACA,GAAA,EAAKC,MAAN,WACI,cAACD,GAAA,EAAKrK,MAAN,CAAY9T,MAAM,sBAClB,eAACme,GAAA,EAAKtK,QAAN,WACA,cAACsK,GAAA,EAAKE,QAAN,CAAc9Q,QAAQ,YAAYqC,UAAU,cACxC,eAACuO,GAAA,EAAKE,QAAN,WAAgB,cAAC/J,EAAA,EAAD,CAAM5I,KAAK,cAA3B,8BAGA,eAACkG,GAAA,EAAD,CAAMC,YAAU,EAACpC,MAAO,CAAEiG,aAAa,GAAvC,UACI,cAAC9D,GAAA,EAAK/B,KAAN,UACG,8BAAI,cAACyE,EAAA,EAAD,CAAM5I,KAAK,cAAf,mBAEH,cAACkG,GAAA,EAAK/B,KAAN,UACG,8BAAI,cAACyE,EAAA,EAAD,CAAM5I,KAAK,SAAf,yBAGP,sBAAKkE,UAAU,iBAAf,UACI,cAACU,EAAA,EAAD,CAAQiE,OAAK,EAACR,MAAM,OAAO7C,KAAK,OAAOzB,MAAO,CAAEY,YAAY,GAAI9C,QAAQ,iBACxE,cAAC+C,EAAA,EAAD,CAAQiE,OAAK,EAACR,MAAM,OAAOxG,QAAQ,yBAM3C,eAAC4Q,GAAA,EAAKC,MAAN,WACA,cAACD,GAAA,EAAKrK,MAAN,CAAY9T,MAAM,sBAClB,eAACme,GAAA,EAAKtK,QAAN,WACA,cAACsK,GAAA,EAAKE,QAAN,CAAc9Q,QAAQ,WAAWqC,UAAU,cACvC,eAACuO,GAAA,EAAKE,QAAN,WAAe,cAAC/J,EAAA,EAAD,CAAM5I,KAAK,cAA1B,8BAGA,eAACkG,GAAA,EAAD,CAAMC,YAAU,EAACpC,MAAO,CAAEiG,aAAa,GAAvC,UACI,cAAC9D,GAAA,EAAK/B,KAAN,UACG,8BAAI,cAACyE,EAAA,EAAD,CAAM5I,KAAK,cAAf,oBAEH,cAACkG,GAAA,EAAK/B,KAAN,UACG,8BAAI,cAACyE,EAAA,EAAD,CAAM5I,KAAK,SAAf,wBAGP,sBAAKkE,UAAU,iBAAf,UACI,cAACU,EAAA,EAAD,CAAQiE,OAAK,EAACR,MAAM,OAAO7C,KAAK,OAAOzB,MAAO,CAAEY,YAAY,GAAI9C,QAAQ,iBACxE,cAAC+C,EAAA,EAAD,CAAQiE,OAAK,EAACR,MAAM,OAAOxG,QAAQ,yBAK3C,eAAC4Q,GAAA,EAAKC,MAAN,WACA,cAACD,GAAA,EAAKrK,MAAN,CAAY9T,MAAM,sBAClB,eAACme,GAAA,EAAKtK,QAAN,WACI,cAACsK,GAAA,EAAKE,QAAN,CAAc9Q,QAAQ,cAAcqC,UAAU,cAC9C,eAACuO,GAAA,EAAKE,QAAN,WAAe,cAAC/J,EAAA,EAAD,CAAM5I,KAAK,cAA1B,8BAGA,eAACkG,GAAA,EAAD,CAAMC,YAAU,EAACpC,MAAO,CAAEiG,aAAa,GAAvC,UACI,cAAC9D,GAAA,EAAK/B,KAAN,UACG,8BAAI,cAACyE,EAAA,EAAD,CAAM5I,KAAK,cAAf,mBAEH,cAACkG,GAAA,EAAK/B,KAAN,UACG,8BAAI,cAACyE,EAAA,EAAD,CAAM5I,KAAK,SAAf,wBAGP,sBAAKkE,UAAU,iBAAf,UACI,cAACU,EAAA,EAAD,CAAQiE,OAAK,EAACR,MAAM,OAAO7C,KAAK,OAAOzB,MAAO,CAAEY,YAAY,GAAI9C,QAAQ,iBACxE,cAAC+C,EAAA,EAAD,CAAQiE,OAAK,EAACR,MAAM,OAAOxG,QAAQ,iCAQnD,eAACqG,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,QAAN,UACA,cAACD,EAAA,EAAKvC,OAAN,CAAazB,UAAU,cAAvB,+BAEA,cAACgE,EAAA,EAAKC,QAAN,UACA,eAACsK,GAAA,EAAD,WACI,eAACA,GAAA,EAAKC,MAAN,WACA,cAACD,GAAA,EAAKrK,MAAN,CAAY9T,MAAM,sBAClB,eAACme,GAAA,EAAKtK,QAAN,WACI,cAACsK,GAAA,EAAK7W,KAAN,CAAWiG,QAAQ,cACnB,cAAC4Q,GAAA,EAAKE,QAAN,gEAMJ,eAACF,GAAA,EAAKC,MAAN,WACA,cAACD,GAAA,EAAKrK,MAAN,CAAY9T,MAAM,sBAClB,eAACme,GAAA,EAAKtK,QAAN,WACI,cAACsK,GAAA,EAAK7W,KAAN,CAAWiG,QAAQ,eACnB,cAAC4Q,GAAA,EAAKE,QAAN,uDAMJ,eAACF,GAAA,EAAKC,MAAN,WACA,cAACD,GAAA,EAAKrK,MAAN,CAAY9T,MAAM,sBAClB,eAACme,GAAA,EAAKtK,QAAN,WACI,cAACsK,GAAA,EAAK7W,KAAN,CAAWiG,QAAQ,eACnB,cAAC4Q,GAAA,EAAKE,QAAN,uFC7JjBjP,gBAnBC,WACZ,IAAQjL,EAAaqT,eAAbrT,SACAqJ,EAAiB0B,IAAjB1B,aACA7D,EAAuD6D,EAAvD7D,YAAc3E,EAAyCwI,EAAzCxI,QAASmE,EAAgCqE,EAAhCrE,eAAeM,EAAiB+D,EAAjB/D,aAK9C,OAJAyJ,qBAAU,WAEN,OADAvJ,EAAYxF,GACL,kBAAMsF,EAAa,MAC5B,CAACE,EAAYxF,EAASsF,IACrBN,EACO,cAAC,GAAD,CAAkBoE,QAAQ,yBAEhC,cAAC6E,EAAA,EAAD,UACI,cAACA,EAAA,EAAKG,OAAN,CAAapB,MAAO,GAApB,SACMnM,GAAY,cAAC,GAAD,CAAeA,QAASA,W,2BCHvCsZ,GAVM,SAAC,GAAyC,IAA9BC,EAA6B,EAAvCC,UAAuBC,EAAgB,mBACrCpP,EAAeH,IAA5BtN,UAAayN,WACrB,OACI,cAAC,KAAD,2BACKoP,GADL,IAEChJ,OAAQ,SAAChB,GAAD,OAAWpF,EAAa,cAACkP,EAAD,eAAe9J,IAAW,cAAC,KAAD,CAAUvE,GAAG,WCXjE,SAASwO,KACpB,OAAO,IAAItW,gBAAgBuW,eAAcC,QCC7C,IAsBeC,GAtBI,WACf,IAAM9a,EAAQ2a,KAAWlc,IAAI,SAI7B,OACI,mCACE,eAACgQ,GAAA,EAAD,CAASf,UAAU,SAAS8D,aAAW,EAAvC,UACI,eAAClE,EAAA,EAAD,CAAQN,MAAI,EAAChB,GAAG,KAAKH,UAAU,cAA/B,UAA6C,cAAC0E,EAAA,EAAD,CAAM5I,KAAK,UAAxD,yDACA,mBAAGkE,UAAU,cAAb,sEAEI7L,GACA,qCACE,oEACA,cAACuM,EAAA,EAAD,CAAQiE,OAAK,EAACR,MAAM,OAAOxG,QAAQ,eAAeqC,UAAU,cAAcoB,QAZtE,kBAAMlO,EAAMS,QAAQS,wBAAwBD,GAC3CtB,MAAK,kBAAM/B,QAAQC,IAAI,yCACvBkL,OAAM,SAAC/K,GAAD,OAAWJ,QAAQC,IAAIG,kBCmDvCge,GApDM,WACjB,IAAQ5T,EAAegE,IAAfhE,WACFnH,EAAQ2a,KAAWlc,IAAI,SACvBL,EAAQuc,KAAWlc,IAAI,SACvBuc,EACQ,YADRA,EAEK,SAFLA,EAGM,UAEZ,EAA2BhM,mBAASgM,GAApC,mBAAOhe,EAAP,KAAcie,EAAd,KAGMC,EAAc,kBAAMnc,EAAMS,QAAQS,wBAAwBD,GAC3CtB,MAAK,kBAAM/B,QAAQC,IAAI,yCACvBkL,OAAM,SAAC/K,GAAD,OAAWJ,QAAQC,IAAIG,OA4BlD,OALAoS,qBAAU,WACNpQ,EAAMS,QAAQO,YAAY3B,EAAM4B,GAAOtB,MAAK,kBAAMuc,EAAUD,MAAiBlT,OAAM,kBAAMmT,EAAUD,QACrG,CAACA,EAAcA,EAAehb,EAAM5B,IAIlC,mCACE,eAACqQ,GAAA,EAAD,CAASf,UAAU,SAAS8D,aAAW,EAAvC,UACI,eAAClE,EAAA,EAAD,CAAQN,MAAI,EAAChB,GAAG,KAAKH,UAAU,cAA/B,UAA6C,cAAC0E,EAAA,EAAD,CAAM5I,KAAK,aAAxD,yBACA,cAAC8G,GAAA,EAAQ0M,OAAT,UA9BG,WACT,OAAOne,GACH,KAAKge,EACA,OACC,qCACE,mBAAGnP,UAAU,cAAb,8GACA,cAACU,EAAA,EAAD,CAAQiE,OAAK,EAACR,MAAM,OAAOxG,QAAQ,eAAeqC,UAAU,cAAcoB,QAASiO,OAG3F,KAAKF,EACA,OAAO,mBAAGnP,UAAU,cAAb,2DACZ,KAAKmP,EACA,OACK,qCACE,mBAAGnP,UAAU,cAAb,yEACA,cAACU,EAAA,EAAD,CAAQiE,OAAK,EAACR,MAAM,OAAOxG,QAAQ,QAAQqC,UAAU,cAAcoB,QAAS,kBAAM9F,EAAWoC,UAAU,cAAC,GAAD,qBC0BhH8B,gBA1CH,WACV,IAAM+P,EAAYR,eAClB,EAAmCzP,IAA3BpN,EAAR,EAAQA,YAAaF,EAArB,EAAqBA,UASrB,OARAsR,qBAAU,WAELpR,EAAYK,MAAOP,EAAU2J,2BAA2B6T,SAAQ,kBAAMtd,EAAYoL,kBAEnFtL,EAAUuK,sBAAsB1J,MAAK,kBAAMX,EAAYoL,oBAEzD,CAACpL,EAAaF,IAEZE,EAAYmL,UAEd,qCACE,cAAC,GAAD,IACA,cAAC,IAAD,CAAgBuD,SAAS,iBACzB,cAAC,KAAD,CAAOP,OAAK,EAACoP,KAAK,IAAIb,UAAWc,KACjC,cAAC,KAAD,CACGD,KAAM,QACN5J,OAAQ,kBACN,qCACG,cAAC,EAAD,IACA,cAAC9F,EAAA,EAAD,CAAWF,MAAO,CAAE2B,UAAU,QAA9B,SACE,eAAC,KAAD,WACE,cAAC,GAAD,CAAcnB,OAAK,EAACoP,KAAK,cAAcb,UAAWe,KAClD,cAAC,GAAD,CAAcF,KAAK,kBAAkBb,UAAWgB,KAChD,cAAC,GAAD,CAAiCH,KAAM,CAAC,kBAAkB,eAAgBb,UAAWiB,IAAlEN,EAAS5d,KAC5B,cAAC,GAAD,CAAc8d,KAAK,mBAAkBb,UAAW5E,KAChD,cAAC,GAAD,CAAcyF,KAAK,gBAAgBb,UAAWkB,KAC9C,cAAC,KAAD,CAAOL,KAAK,SAASb,UAAWmB,KAChC,cAAC,KAAD,CAAON,KAAK,gCAAgCb,UAAWK,KACvD,cAAC,KAAD,CAAOQ,KAAK,sBAAsBb,UAAWM,KAC7C,cAAC,GAAD,CAAcO,KAAK,sBAAsBb,UAAW5e,mBArBlC,cAAC,GAAD,CAAkB2N,QAAQ,2BCnB/CqS,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBrd,MAAK,YAAkD,IAA/Csd,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,uCCGCO,GARK,WAChB,IAAQC,EAAa1B,eAAb0B,SAIR,OAHAnN,qBAAU,WACN9H,OAAOkV,SAAS,EAAE,KACpB,CAACD,IACI,MCKEjf,GAAUmf,eAUvBC,IAAS/K,OACP,cAACzG,EAAayR,SAAd,CAAuBta,MAAOxE,EAA9B,SACE,eAAC,KAAD,CAAQP,QAASA,GAAjB,UACE,cAAC,GAAD,IACA,cAAC,GAAD,SAIJsf,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.470f3a95.chunk.js","sourcesContent":["// pagination header send in response.\nexport interface Pagination{\n    currentPage:number;\n    pageSize:number;\n    totalItems:number;\n    totalPages:number;\n}\n\n// contains paginated result along with pagination header details.\nexport class PaginatedResult<T>{\n    data:T;\n    pagination:Pagination;\n    constructor(data:T,pagination:Pagination){\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams{\n    pageNumber:number;\n    pageSize:number\n    constructor(_pageNumber = 1,_pageSize = 2){\n        this.pageNumber = _pageNumber;\n        this.pageSize = _pageSize;\n    }\n}","import { Profile } from \"./ActivityParticipant\";\n\nexport interface Activity{\n    id:string,\n    title:string,\n    date:Date | null,\n    description:string,\n    category:string,\n    city:string,\n    venue:string,\n    isCancelled?:boolean,\n    hostUserName?:string,\n    participants?:Profile[],\n    isGoing?:boolean,\n    isHost?:boolean,\n    host?:Profile\n}\n\n/**\n * We're using this class to update or create new activity\n */\nexport class ActivityForm {\n    id?:string = undefined\n    title:string = ''\n    date:Date | null = null\n    description:string = ''\n    category:string = ''\n    city:string = ''\n    venue:string = ''\n    constructor(activity? : ActivityForm){\n        if(activity){\n            this.id = activity.id\n            this.title = activity.title\n            this.date = activity.date\n            this.description = activity.description\n            this.category = activity.category\n            this.city = activity.city\n            this.venue = activity.venue\n        }\n    }\n}\n\nexport class Activity implements Activity{\n    constructor(init?:ActivityForm){\n        // initialise all the matching properties from init to activity Object.assign(object we want to assign to,object we want to assign to)\n        Object.assign(this,init)\n    }\n}","import { User } from \"./user\";\n\nexport interface Profile{\n    userName:string,\n    displayName:string,\n    image?:string,\n    bio?:string,\n    photos?:Photo[],\n    followersCount:number,\n    followingCount:number,\n    following:boolean\n}\n\nexport class Profile implements Profile{\n    constructor(user:User){\n        this.userName = user.userName;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo{\n    id:string\n    url:string\n    isMainPhoto:boolean\n}\n\nexport interface UserActivity{\n    id:string\n    title:string\n    category:string\n    date:Date\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { Activity, ActivityForm} from '../models/activity';\nimport { store } from \"./Stores/store\";\nimport { history } from '../../../src/index'\nimport { UserForm } from '../models/user'\nimport { PaginatedResult } from \"../models/paginations\";\nimport { Profile } from \"../models/ActivityParticipant\";\n\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL\n\n/** Add delayLoading to axios.intereceptors to delay loading of activities */\nconst delayLoading = (duration:number) => {\n    return new Promise(resolve => {\n        setTimeout(resolve, duration);\n    })\n}\n\n// axios.interceptors.response.use(async response => {\n//     return await delayLoading(1000).then(() => {return response}).catch((err)=> {\n//         console.log(`Erro occured in Line 14 Agent.ts:${err.message}`)\n//         return Promise.reject(err)\n//     })\n// }) ;\n\naxios.interceptors.response.use(async response => {\n    if(process.env.NODE_ENV === 'development')\n       await delayLoading(1000);\n    const pagination = response.headers['pagination']\n    if(pagination){\n        console.log(\"Found pagination\")\n        response.data = new PaginatedResult(response.data,JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>\n    }\n    return response;\n},(error:AxiosError) => {\n    const {data,status,config,headers} = error.response!;\n    switch(status){\n        case 400:\n            /** \n             * data.errors object will contain all the validation errors thrown by FluentValidation\n             * For example-\n             * Fields must not be empty.\n             *\n             */\n            if(config.method === 'get' && data.errors.hasOwnProperty('id'))\n                history.push('/not-found')\n            if(data.errors){\n                const ModalErrors = [];\n                for(const key in data.errors){\n                    if(data.errors[key]){\n                        ModalErrors.push(data.errors[key]);\n                    }\n                }\n                throw ModalErrors.flat();\n            }\n            if(typeof data === 'string')\n                toast.error(data);        \n            break;\n        case 401:\n            if(headers['www-autheticate']?.startsWith('Bearer error=\"invalid_token\"')){\n               store.userStore.LogOut();\n               toast.error(\"Session-expired\");\n            }\n            break;\n        case 404:\n            toast.error(\"Not Found\");\n            break;   \n        case 500:\n            store.commonStore.setServerErrors(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n}) ;\n\n/** We will send token with each request if it is available inside the local storage */\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if(token) config.headers.Authorization = `Bearer ${token}`\n    return config\n})\n\nconst responseData = (response:AxiosResponse) => response.data;\nconst requests = {\n    get:(url:string) => axios.get(url).then(responseData),\n    post:(url:string,body:{}) => axios.post(url,body).then(responseData),\n    put:(url:string,body:{}) => axios.put(url,body).then(responseData),\n    del:(url:string) => axios.delete(url).then(responseData),\n}\n\n\n/** url passed to requests.get will get appended to basUrl of axios*/\nconst CrudOperations = {\n    ActivitiesList: (params:URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities/',{params}),\n    ActivityDetails:(id:string) => requests.get(`/activities/${id}`),\n    Create:(activity:ActivityForm) => requests.post('/activities',activity),\n    Update:(id:string,activity:ActivityForm) => requests.put(`/activities/${id}`,activity),\n    Delete:(id:string) => requests.del(`/activities/${id}`),\n    Attend:(id:string) => requests.post(`/activities/${id}/attend`,{}) \n}\n\nconst Account = {\n    currentUser: () => requests.get('/account'),\n    loginUser: (user:UserForm) => requests.post('/account/login',user),\n    registerUser: (user:UserForm) => requests.post('/account/register',user),\n    fbLogin:(accessToken:string) => requests.post(`/account/fblogin?accessToken=${accessToken}`,{}),\n    refreshToken:() => requests.post('/account/refresh-token',{}),\n    verifyEmail:(token:string,email:string) => requests.post(`/account/verifyEmail?token=${token}&email=${email}`,{}),\n    resendVerificationEmail:(email:string) => requests.get(`/account/resend-email-verification?email=${email}`)\n}\n\n\nconst Profiles = {\n    getProfile:(username:string) => requests.get(`/profile/${username}`),\n    uploadPhoto:(file:Blob) => {\n        let formData = new FormData();\n        formData.append('File',file)\n        return axios.post('photos',formData,{\n            headers:{'Content-type':'multipart/form-data'}\n          }\n        )\n    },\n    setMainPhoto:(id:string) => requests.post(`/photos/${id}/setmain`,{}),\n    deletePhoto:(id:string) => requests.del(`/photos/${id}`),\n    updateFollowings:(username:string) => requests.post(`/follow/${username}`,{}),\n    getFollowingsList:(username:string,predicate:string) => requests.get(`/follow/${username}?predicate=${predicate}`),\n    profileActivities:(username:string,predicate:string) => requests.get(`/profile/${username}/activities?predicate=${predicate}`),\n    updateProfile:(profile:Partial<Profile>) => requests.put('/profile',profile)\n}\n\n\nconst Agent = {\n    CrudOperations,\n    Account,\n    Profiles\n}\n\nexport default Agent;","import { format } from \"date-fns\";\nimport {  makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport { Pagination, PagingParams } from '../../models/paginations';\nimport { Activity, ActivityForm } from \"../../models/activity\";\nimport { Profile } from \"../../models/ActivityParticipant\";\nimport Agent from '../agent';\nimport { store } from \"./store\";\n\nexport default class ActivityStore {\n\n    activityRegistry = new Map<string,Activity>();\n    Loading:boolean = false\n    InitialLoading:boolean = true\n    currentActivity:Activity | undefined = undefined\n    editing:boolean = false;\n    pagination:Pagination | null = null\n    pagingParams = new PagingParams()\n    predicate = new Map().set('all',true)\n\n    constructor() {\n        makeAutoObservable(this)\n        reaction(\n            () => this.predicate.keys(), // obeserve the key changes\n            () => {\n                this.activityRegistry.clear()\n                this.pagingParams = new PagingParams()\n                this.LoadActivities()\n            }\n        )\n    }\n\n    LoadActivities = async () => {\n        this.setInitialLoading(true)\n        try{\n            const result = await Agent.CrudOperations.ActivitiesList(this.axiosParams)\n            result.data.data.forEach((activity:Activity) => {\n                this.SetActivity(activity)\n            });\n            this.setPagination(result.data.pagination)\n            this.setInitialLoading(false);\n        }catch(error){\n            console.log(`Error Loading activities: ActivityStore.tsx \\n ${error}`);\n            this.setInitialLoading(false)\n        }\n    }\n\n    setPagingParams = (pagingParams:PagingParams) => this.pagingParams = pagingParams;\n    setPagination = (pagination:Pagination) => this.pagination = pagination;\n    setPredicate = (key:string,value:string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value,key) => {\n                if(key !== 'startDate'){\n                    this.predicate.delete(key)\n                }\n            })\n        }\n        switch(key){\n            case 'all':\n                resetPredicate()\n                this.predicate.set('all',true)\n                break\n            case 'isGoing':\n                resetPredicate()\n                this.predicate.set('isGoing',true)\n                break\n            case 'isHosting':\n                resetPredicate()\n                this.predicate.set('isHosting',true)\n                break\n            case 'startDate':\n                this.predicate.delete('startDate')\n                this.predicate.set('startDate',value)\n        }\n    }\n\n    get axiosParams(){\n        const params = new URLSearchParams();\n        params.append('pageNumber',this.pagingParams.pageNumber.toString());\n        params.append('pageSize',this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value,key) => {\n            if(key === 'startDate'){\n                params.append(key,(value as Date).toISOString());\n            }else{\n                params.append(key,value);\n            }\n        })\n        return params\n    }\n\n    setInitialLoading = (state:boolean) => this.InitialLoading = state \n\n    createActivity = async (activity:ActivityForm) => {\n        const user  = store.userStore.user;\n        const participant = new Profile(user!);\n        try {\n            await Agent.CrudOperations.Create(activity)\n            const newActivity = new Activity(activity)\n            newActivity.hostUserName = user!.userName;\n            newActivity.participants = [participant]\n            this.SetActivity(newActivity)\n            runInAction(() => this.currentActivity = newActivity )\n        } catch (error) {\n            console.log(\"Error deleteActivity():ActivityStore.ts\\n\")\n        }\n    }\n\n\n    updateActivity = async (activity:ActivityForm) => {\n        try {\n            if(activity.id){\n                await Agent.CrudOperations.Update(activity.id,activity)\n            }\n            runInAction(() => {\n                if(activity.id){\n                    let updatedActivity = {...this.GetActivity(activity.id),...activity}\n                    this.activityRegistry.set(activity.id,updatedActivity as Activity)\n                    this.currentActivity = updatedActivity as Activity\n                }\n            })\n        } catch (error) {\n            console.log(\"Error UpdateActivity():ActivityStore.ts\\n\")\n        }\n    }\n\n    deleteActivity = async (id:string) => {\n        this.Loading = true;\n        try {\n            await Agent.CrudOperations.Delete(id)\n            runInAction(() => {\n                this.activityRegistry.delete(id)\n                this.Loading = false\n            })\n        } catch (error) {\n            console.log(\"Error deleteActivity():ActivityStore.ts\\n\")\n            runInAction(() => {\n                this.Loading = false;\n            })\n        }\n    }\n\n    get ActivitiesByDate(){\n        return Array.from(this.activityRegistry.values()).sort( (a,b) => a.date!.getTime() - b.date!.getTime() )\n    }\n\n    LoadActivity = async (id:string) => {\n        let activity = this.GetActivity(id) \n        if(activity){\n            this.currentActivity = activity\n            return activity\n        }\n        else{\n            this.setInitialLoading(true)\n            try {\n                activity = await Agent.CrudOperations.ActivityDetails(id)\n                this.SetActivity(activity!)\n                runInAction(() => {\n                    this.currentActivity = activity\n                })\n                this.setInitialLoading(false)\n                return activity\n            } catch (error) {\n                console.log(error)\n                this.setInitialLoading(false)\n            }\n        }\n    }\n\n    private  SetActivity = (activity:Activity) => {\n        const user = store.userStore.user;\n        // activity.participants!.some will return boolean if any item inside matches the condition inside it.\n        if(user){\n            activity.isGoing = activity.participants!.some(\n                  participant => participant.userName === user.userName\n                );\n            activity.isHost = activity.hostUserName === user.userName;\n            activity.host = activity.participants?.find(participant => participant.userName === activity.hostUserName)\n        }\n        activity.date = new Date(activity.date!)\n        this.activityRegistry.set(activity.id,activity)\n    }\n\n    private GetActivity = (id:string) => {\n       return this.activityRegistry.get(id)\n    }\n\n    get GroupedActivities(){\n        return Object.entries(\n            this.ActivitiesByDate.reduce((activities,activity) => {\n                const date = format(activity.date!,'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date],activity] : [activity]\n                return activities\n            },{} as {[key:string] : Activity[]})\n        )\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.Loading = true;\n        try {\n            await Agent.CrudOperations.Attend(this.currentActivity!.id);\n            runInAction(() => {\n                // User is going and want to cancel\n                if(this.currentActivity?.isGoing){\n                    // if going remove user from list of participants\n                    this.currentActivity.participants = this.currentActivity.participants?.filter(participant => participant.userName !== user?.userName)\n                    this.currentActivity.isGoing = false\n                } \n                // User is not going and want to participate\n                else{\n                    const participant = new Profile(user!)\n                    this.currentActivity?.participants?.push(participant)\n                    this.currentActivity!.isGoing = true\n                }\n                // add update activity\n                this.activityRegistry.set(this.currentActivity!.id,this.currentActivity!)\n            })\n        } catch (error) {\n            console.log(\"Error Updating Attendance:updateAttendance()\\n\",error.message)\n        }\n        finally{\n            runInAction(() => this.Loading = false)\n        }\n    }\n\n    cancelActivity = async () => {\n        this.Loading = true\n        try {\n            await Agent.CrudOperations.Attend(this.currentActivity!.id);\n            runInAction(() => { \n                this.currentActivity!.isCancelled = !this.currentActivity?.isCancelled\n                this.activityRegistry.set(this.currentActivity!.id,this.currentActivity!)\n            })\n        }catch (error) {\n            console.log(\"Error Cancelling Activity:cancelAttendance()\\n\",error.message)\n        }\n        finally{\n            runInAction(() => this.Loading = false)\n        }\n    }\n\n    /**\n     * Clear current activity from memory otherwise it'll give us an error when we go to activtiy details page\n     * and then come back and select different activity when making connection with signalR-hub as old activity is still \n     * set as current activity so signalR will try to add that user to the same activity group again as per the logic \n     * defined in ChatHub.cs which in return will throw an error.\n     */\n    clearCurrentActivity = () => this.currentActivity = undefined\n\n    updateParticipantFollowing = (username:string) => {\n        this.activityRegistry.forEach((activity) => {\n            activity.participants?.forEach(participant => {\n                if(participant.userName === username){\n                    participant.following ? participant.followersCount-- : participant.followersCount++;\n                    participant.following = !participant.following\n                }\n            })\n        })\n    } \n}","import { Photo, Profile, UserActivity } from \"../../models/ActivityParticipant\";\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport Agent from \"../agent\";\nimport { store } from \"./store\";\n\nexport class ProfileStore{\n    profile:Profile | null = null;\n    LoadingProfile = false\n    Uploading = false;\n    Loading = false;\n    followings:Profile[] = [];\n    LoadingFollowings:boolean = false;\n    ActiveTab:number = 0\n    userActivities:UserActivity[] = []\n    predicate:string | null = null;\n\n    constructor(){ \n        makeAutoObservable(this) \n        reaction(() => this.ActiveTab,\n        ActiveTab => {\n            if(this.ActiveTab === 3 || this.ActiveTab === 4){\n                const predicate = ActiveTab === 3 ? 'followers' : 'following'\n                this.ListFollowings(predicate)\n            }\n            else{\n                this.followings = []\n            }\n        })\n    }\n\n    setActiveTab = (activeTab:any) => this.ActiveTab = activeTab\n\n    LoadProfile = async (username:string) => {\n        this.LoadingProfile = true;\n        try {\n            const profile  = await Agent.Profiles.getProfile(username);\n            runInAction(() => {\n                this.profile = profile\n                this.LoadingProfile = false\n            })\n        } catch (error) {\n            console.log(\"Error Loading Profile:LoadProfile()\\n\",error.messgae)\n            runInAction(() => this.LoadingProfile = false)\n        }\n    }\n\n    // Allow only currently logged in users to upload photos.You can't add photos if you're just viewing other user's profile.\n    get IsCurrentUser(){\n        if(store.userStore.user && this.profile)\n           return store.userStore.user.userName === this.profile.userName\n        return false\n    }\n\n    uploadPhoto = async (file:Blob) => {\n        this.Uploading= false;\n        try {\n            const response  = await Agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if(this.profile){\n                    this.profile.photos?.push(photo)\n                    if(photo.IsMainPhoto && store.userStore.user){\n                        store.userStore.setImage(photo.url)\n                        this.profile.image = photo.url\n                    }\n                }\n                this.Uploading = false;\n            })\n        } catch (error) {\n            console.log(\"Error UpLoading photo:uploadPhoto()\\n\",error.messgae)\n            runInAction(() => this.Uploading = false)\n        }\n    }\n\n    setMain = async (photo:Photo) => {\n        this.Loading = true;\n        try {\n            await Agent.Profiles.setMainPhoto(photo.id)\n            store.userStore.setImage(photo.url)\n            runInAction(() => {\n                if(this.profile && this.profile.photos){\n                    // find current main photo\n                    this.profile.photos.find(photo => photo.isMainPhoto)!.isMainPhoto = false\n                    // set new photo as main photo\n                    this.profile.photos.find(ph => ph.id === photo.id)!.isMainPhoto = true  \n                    this.profile.image = photo.url\n                    this.Loading = false\n                }\n            })\n        } catch (error) {\n            console.log(\"Error setting main photo:setMain()\\n\",error.messgae)\n            runInAction(() => this.Loading = false)\n        }\n    }\n\n    deletePhoto = async (photo:Photo) => {\n        this.Loading = true;\n        try {\n            await Agent.Profiles.deletePhoto(photo.id)\n            runInAction(() => {\n                if(this.profile){\n                    this.profile.photos = this.profile.photos?.filter(ph => ph.id !== photo.id)\n                    this.Loading = false\n                }\n            })\n        } catch (error) {\n            console.log(\"Error deleting photo:deletePhoto()\\n\",error.messgae)\n            runInAction(() => this.Loading = false)\n        }\n    }\n\n    updateFollowing = async (username:string,following:boolean) => {\n        this.Loading = true;\n        try {\n            await Agent.Profiles.updateFollowings(username)\n            store.activityStore.updateParticipantFollowing(username);\n            runInAction(() => {\n                if(this.profile && this.profile.userName !== store.userStore.user?.userName && this.profile.userName === username){\n                    following ?  this.profile.followersCount++ :  this.profile.followersCount--\n                    this.profile.following = !this.profile.following\n                }\n                if(this.profile && this.profile.userName !== store.userStore.user?.userName){\n                    following ?  this.profile.followersCount++ :  this.profile.followersCount--\n                }\n                this.followings.forEach(profile => {\n                    if(profile.userName === username){\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following  = !profile.following \n                    }\n                })\n                this.Loading = false;\n            })\n        } catch (error) {\n            console.log(\"Error updating Followers:updateFollowing()\\n\",error.messgae)\n            runInAction(() => this.Loading = false)\n        }\n    }\n\n    ListFollowings = async (predicate:string) => {\n        // this.LoadingFollowings = true;\n        try {\n            const Followings = await Agent.Profiles.getFollowingsList(this.profile!.userName,predicate);\n            runInAction(() => {\n                this.followings = Followings\n                // this.LoadingFollowings = false;\n            })\n        } catch (error) {\n            console.log(\"Error Getting list of Followings:ListFollowings()\\n\",error.messgae)\n            runInAction(() => this.LoadingFollowings = false)\n        }\n    }\n    \n    setPredicate = (value:string) => this.predicate = value; \n\n    LoadProfileActivities = async (username:string) => {\n        try {\n            const activities = await Agent.Profiles.profileActivities(username,this.predicate!);\n            runInAction(() => this.userActivities = activities )\n        } catch (error) {\n            console.log(\"Error Getting profile activities:LoadProfileActivities()\\n\",error.messgae)\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n                this.Loading = true;\n                try {\n                    await Agent.Profiles.updateProfile(profile);\n                    runInAction(() => {\n                        if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\n                            store.userStore.setDisplayName(profile.displayName);\n                        }\n                        this.profile = {...this.profile, ...profile as Profile};\n                        this.Loading = false;\n                    })\n                } catch (error) {\n                    console.log(\"Error updating profile :updateProfile()\\n\",error.message);\n                    runInAction(() => this.Loading = false);\n        } }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../../..\";\nimport { User, UserForm } from \"../../models/user\";\nimport Agent from \"../agent\";\nimport { store } from \"./store\";\n\nexport default class UserStore{\n    user: User | null = null\n    fbAccessToken:string | null = null\n    fbLoading = false\n    refreshTime:any\n\n    constructor(){ makeAutoObservable(this) }\n    // !! will cast user to boolean i.e if it is not null it will true.\n    get IsLoggedIn(){ return !!this.user }\n\n    LogIn = async (credentials:UserForm) => {\n        try {\n            const user = await Agent.Account.loginUser(credentials);\n            store.commonStore.setToken(user.token)\n            this.StartRefreshTokenCountDwon(user)\n            runInAction(() => {\n                this.user = user\n            })\n            history.push('/activities')\n            store.modalStore.CloseModal()\n            console.log(user);\n        } catch (error) {\n            console.log(\"Error Log In UserStore:LogIn()\\n\"+error.message);\n            throw error;\n        }\n    }\n\n    LogOut = () => {\n        store.commonStore.setToken(null)\n        window.localStorage.removeItem('jwt')\n        this.user = null\n        history.push('/')\n    }\n\n    getUserWithMatchingToken = async () => {\n        try {\n            const user = await Agent.Account.currentUser();\n            runInAction(() => this.user = user)\n        } catch (error) {\n            console.log(\"Error UserStore:getUserWithMatchingToken()\\n\"+error.message);\n            throw error;\n        }\n    }\n\n    Register = async (credentials:UserForm) => {\n        try {\n            const user = await Agent.Account.registerUser(credentials);\n            // store.commonStore.setToken(user.token)\n            // this.StartRefreshTokenCountDwon(user)\n            // runInAction(() => {\n            //     this.user = user\n            // })\n            history.push(`/account/registration-success?email=${credentials.email}`)\n            // history.push('/activities')\n            store.modalStore.CloseModal()\n            console.log(user);\n        } catch (error) {\n            console.log(\"Error Log In UserStore:LogIn()\\n\"+error.message);\n            throw error;\n        }\n    }\n\n    setImage = (Image:string) => {\n        if(this.user) \n            this.user.image = Image;\n    }\n\n    setDisplayName = (name: string) => { if (this.user) this.user.displayName = name }\n\n    FacebookLogin = () => {\n        this.fbLoading = true\n        const APILogin = (accessToken:string) => {\n            Agent.Account.fbLogin(accessToken).then((user) => {\n                store.commonStore.setToken(user.token)\n                this.StartRefreshTokenCountDwon(user)\n                runInAction(() => {\n                    this.user = user\n                    this.fbLoading = false\n                })\n                history.push(\"/activities\")\n            }).catch((error) => {\n                console.log(\"Error Logging User with Facebook FacebookLogin():UserStore.ts\\n\",error.message);\n                runInAction(() => this.fbLoading = false)\n            })\n        }\n        if(this.fbAccessToken){\n            APILogin(this.fbAccessToken)\n        }\n        else\n            window.FB.login(resp => APILogin(resp.authResponse.accessToken),{scope:'public_profile,email'})\n        // window.FB.login(resp => {\n        //     console.log(resp)\n        //     Agent.Account.fbLogin(resp.authResponse.accessToken).then((user) => console.log(user))\n        // },{scope:'public_profile,email'})\n    }\n\n    FacebookLoginStatus = async () => {\n        window.FB.getLoginStatus((resp) => {\n            if(resp.status === 'connected'){\n                this.fbAccessToken = resp.authResponse.accessToken\n            }\n\n        })\n    }\n\n    RefreshToken = async () => {\n        try {\n            const user = await Agent.Account.refreshToken();\n            runInAction(() => this.user = user)\n            this.StartRefreshTokenCountDwon(user)\n            store.commonStore.setToken(user.Token)\n        } catch (error) {\n            console.log(\"Error refreshing Token UserStore:RefreshToken()\\n\"+error.message);\n        }\n    }\n\n    private StartRefreshTokenCountDwon = (user:User) => {\n        // atob() will decode the token\n        const JwtToken = JSON.parse(atob(user.token.split('.')[1]))\n        const expires = new Date(JwtToken.exp * 1000)\n        // this will set our timeout value to 30s before our jwt token expires.\n        const timeout = expires.getTime() - Date.now() - (30 * 1000);\n        this.refreshTime =  setTimeout(this.RefreshToken, timeout);\n    }\n\n    private StopRefreshTokenCountDwon = () => clearTimeout(this.refreshTime)\n}","import { createContext,useContext } from \"react\";\nimport ActivityStore from \"./activityStore\"\nimport CommentStore from \"./commentStore\";\nimport CommonStore from './CommonStore'\nimport ModalStore from \"./ModalStore\";\nimport { ProfileStore } from \"./profileStore\";\nimport UserStore from \"./UserStore\";\n\n/**\n * Add all stores below.\n */\ninterface Store{\n    activityStore:ActivityStore,\n    commonStore:CommonStore,\n    userStore:UserStore,\n    modalStore: ModalStore,\n    profileStore:ProfileStore,\n    commentStore:CommentStore\n}\n\nexport const store:Store = {\n    activityStore : new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store)\n\nexport const useStore = () => {\n    return useContext(StoreContext)\n}","import { ServerError} from '../../models/serverError';\nimport { makeAutoObservable,reaction } from 'mobx';\n\nexport default class CommonStore{\n    error:ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false\n    constructor(){\n        makeAutoObservable(this);\n        reaction(() => this.token, // react when token changes.\n        token => {\n            if(token)\n                window.localStorage.setItem('jwt',token)\n            else\n               window.localStorage.removeItem('jwt')\n        })\n    }\n\n    setServerErrors = (error:ServerError) => this.error = error\n    setToken = (token:string | null) =>  this.token = token\n    setAppLoaded = () => this.appLoaded = true;\n}","import {makeAutoObservable} from 'mobx'\ninterface Modal{\n    open: boolean,\n    body: JSX.Element| null\n}\n\nexport default class ModalStore{\n    modal:Modal = {\n        open:false,\n        body:null\n    }\n    constructor(){ makeAutoObservable(this) }\n    OpenModal = (content:JSX.Element) => {\n        this.modal.body = content;\n        this.modal.open = true\n    }\n    CloseModal = () => {\n        this.modal.body = null;\n        this.modal.open = false\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore{\n    comments:ChatComment[] = [];\n    hubConnection:HubConnection | null = null;\n    constructor(){ \n        makeAutoObservable(this);\n    }\n    createConnection = (activityId:string) => {\n        if(store.activityStore.currentActivity){\n            // ${process.env.REACT_APP_CHAT_URL}\n            this.hubConnection = new HubConnectionBuilder().withUrl(`${process.env.REACT_APP_CHAT_URL}?activityId=${activityId}`,{\n                accessTokenFactory:() => store.userStore.user?.token!\n            })\n            .withAutomaticReconnect()\n            .configureLogging(LogLevel.Information)\n            .build();\n            this.hubConnection?.start().catch(error => console.log(\"Error building connection createConnection():CommentStore\\n\"+error.message))\n            this.hubConnection.on('LoadComments',(comments:ChatComment[]) => runInAction(() => {\n                comments.forEach(comment => {\n                    comment.createdAt = new Date(comment.createdAt+'Z')\n                }) \n                this.comments = comments\n            }));\n            this.hubConnection.on('ReceiveComment',(comment:ChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt)\n                    // put new comment first\n                    this.comments.unshift(comment)\n                })\n            })\n        }\n    }\n\n    stopConnection = () => \n        this.hubConnection?.stop().catch(error => console.log(\"Error stopping connection stopConnection():CommentStore\\n\"+error.message))\n    clearComments = () =>{\n        this.comments = [];\n        this.stopConnection();\n    }\n\n    addComment = async (value:any) => {\n        value.activityId = store.activityStore.currentActivity?.id\n        try {\n            await this.hubConnection?.invoke(\"sendComment\",value)\n            \n        } catch (error) {\n            console.log(\"Error adding new comment addComment():CommentStore\\n\"+error.message)\n        }\n    }\n}","import { Menu,Container,Button,Image,Dropdown} from \"semantic-ui-react\";\nimport { NavLink,Link } from \"react-router-dom\";\nimport { useStore } from '../../app/api/Stores/store'\nimport { observer } from \"mobx-react-lite\";\n\nconst NavBar = () => {\n    const { userStore } = useStore();\n    const { user ,LogOut,IsLoggedIn } = userStore;\n    return(\n        <Menu inverted fixed='top' style={{ marginDown:20}}> \n           <Container className='custom-font'>\n               <Menu.Item header as={NavLink} exact to='/'>\n                   <img src=\"/assets/Logo.png\" alt=\"\" style={{ marginRight:10 }}/>\n                   Home\n               </Menu.Item>\n               { IsLoggedIn && \n                <>\n                <Menu.Item name=\"Activities\" as={NavLink} to='/activities'/>\n                <Menu.Item >\n                    <Button as={NavLink} to='/createActivity' className='custom-font' positive content=\"Create Activity\"/>\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.jpeg'} avatar spaced='right'/>\n                    <Dropdown \n                        pointing='top left'\n                        text={user?.displayName}\n                    >\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text='Profile' icon='user'/>\n                            <Dropdown.Item onClick={LogOut} text='Log Out' icon='power'/>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item> \n               </> \n               }\n            </Container>\n        </Menu>\n    )\n} \n\nexport default observer(NavBar)","//  import '../../app/layouts/index.css'\n import { Menu,Header } from \"semantic-ui-react\";\n import Calendar from \"react-calendar\";\nimport { observer } from \"mobx-react-lite\";\nimport { useStore } from \"../../app/api/Stores/store\";\n\nconst ActivityFilter = () => {\n    const { activityStore:{predicate,setPredicate} } = useStore();\n     return(\n         <>\n         <Menu vertical size='large' style={{ width:'100%',marginTop:25 }}>\n             <Header className='custom-font' icon='search' attached content='Lookup'/>\n             <Menu.Item \n              className='custom-font' \n              content=\"Events I'm Attending\"\n              active={predicate.has('isGoing')}\n              onClick={() => setPredicate('isGoing','true')}\n              />\n             <Menu.Item \n              className='custom-font' \n              content=\"Events I'm Hosting\"\n              active={predicate.has('isHosting')}\n              onClick={() => setPredicate('isHosting','true')}\n              />\n             <Menu.Item \n              className='custom-font'\n              content=\"All Events\"\n              active={predicate.has('all')}\n              onClick={() => setPredicate('all','true')}\n              />\n         </Menu>\n         <Header className='custom-font' as='h5' textAlign='center' style={{ margin:30 }} content='Simply Filter By Date'/>\n         <Calendar\n          className='custom-font'\n          onChange={(date) => setPredicate('startDate',date as Date)}\n          value={predicate.get('startDate') || new Date()}\n\n         />\n         </>\n     )\n }\n\n export default observer(ActivityFilter)","import { observer } from \"mobx-react-lite\";\nimport { List,Image,Popup } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/ActivityParticipant\";\nimport {Link} from 'react-router-dom'\n// import UProfile from \"../Profiles/UProfile\";\n\ninterface Props{\n    participants:Profile[],\n    user:string\n}\nconst ActivityPartcipants = ({participants,user}:Props) => {\n    return(\n        <List horizontal>\n            {\n            participants.map(participant => (\n                <Popup\n                  content={participant.following ? \n                    \"You're already following \"+participant.userName: participant.userName === user ? \"See who's your followers\":\n                    \"Follow \"+participant.userName + \" for more details\" } \n                  header={participant.userName}\n                  key={participant.userName}\n                  size='tiny'\n                  hoverable\n                  trigger={\n                    <List.Item key={participant.userName} as={Link} to={`/profiles/${participant.userName}`}>\n                      <Image size='mini' circular src={participant.image ||  '/assets/user.jpeg'}/>\n                    </List.Item>\n                  }\n                >\n                    {/* <Popup.Content>\n                        <UProfile profile={participant}/>\n                    </Popup.Content> */}\n                </Popup>\n              ))\n            }\n        </List>\n    )\n}\nexport default observer(ActivityPartcipants);","import { Fragment } from 'react';\nimport { Segment, Placeholder,Grid } from 'semantic-ui-react';\n\nconst ActivityPlaceholder = () => {\n    return (\n        <Fragment>\n            <Grid columns={1} stackable>\n            <Grid.Column>\n            <Segment raised>\n                <Placeholder>\n                <Placeholder.Header image>\n                    <Placeholder.Line />\n                    <Placeholder.Line />\n                </Placeholder.Header>\n                <Placeholder.Paragraph>\n                    <Placeholder.Line length='medium' />\n                    <Placeholder.Line length='short' />\n                </Placeholder.Paragraph>\n                </Placeholder>\n            </Segment>\n            </Grid.Column>\n\n            <Grid.Column>\n            <Segment raised>\n                <Placeholder>\n                <Placeholder.Header image>\n                    <Placeholder.Line />\n                    <Placeholder.Line />\n                </Placeholder.Header>\n                <Placeholder.Paragraph>\n                    <Placeholder.Line length='medium' />\n                    <Placeholder.Line length='short' />\n                </Placeholder.Paragraph>\n                </Placeholder>\n            </Segment>\n            </Grid.Column>\n\n            <Grid.Column>\n            <Segment raised>\n                <Placeholder>\n                <Placeholder.Header image>\n                    <Placeholder.Line />\n                    <Placeholder.Line />\n                </Placeholder.Header>\n                <Placeholder.Paragraph>\n                    <Placeholder.Line length='medium' />\n                    <Placeholder.Line length='short' />\n                </Placeholder.Paragraph>\n                </Placeholder>\n            </Segment>\n            </Grid.Column>\n        </Grid>\n        </Fragment>\n    );\n};\n\nexport default ActivityPlaceholder;\n","import { Card,CardGroup,Button,Container,Grid,Image,Icon,Item,Label } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/api/Stores/store\";\nimport { observer } from \"mobx-react-lite\";\n// import { LoadingComponent } from '../../app/layouts/LoadingComponent';\nimport { Fragment, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport  ActivityFilter from \"./ActivityFilter\"; \nimport { format } from \"date-fns\";\nimport ActivityListParticipants from \"./ActivityListParticipants\";\nimport { PagingParams } from \"../../app/models/paginations\";\nimport { useState } from \"react\";\nimport InfiniteScroll from 'react-infinite-scroller';\nimport ActivityPlaceholder from \"./ActivityPlaceholder\";\n\nconst Dashboard = () => {\n    const { activityStore } = useStore();\n    const { LoadActivities,GroupedActivities,setPagingParams,pagination } = activityStore;\n    const [LoadingNext,setLoadingNext] = useState(false);\n\n    const GetNextItems = () => {\n        setLoadingNext(true)\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\n        LoadActivities().then(() => setLoadingNext(false))\n    }\n\n    useEffect(() => {\n       LoadActivities()\n    },[LoadActivities])\n\n    // if(activityStore.InitialLoading && !LoadingNext) return <LoadingComponent content='Loading Activities'/>\n\n    return(\n        <Grid>\n            <Grid.Column width='10' style={{ marginTop: 50}}>\n                { activityStore.InitialLoading && !LoadingNext ? \n                 <>\n                  <ActivityPlaceholder/>\n                  <ActivityPlaceholder/>\n                 </>\n                  :\n                <InfiniteScroll\n                 pageStart={0}\n                 loadMore={GetNextItems}\n                 hasMore={!LoadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                 initialLoad={false}\n                >\n                { GroupedActivities.map(([group,activities],index) => (\n                    <Fragment key={index}>\n                          <h5 className='custom-font'>{ group }</h5>\n                          <CardGroup>\n                          { activities.map((activity:any) => (\n                            <Card key={activity.id}>\n                                <Card.Content>\n                                {\n                                    activity.isCancelled &&\n                                    <Label\n                                    style={{ textAlign:'center',position: 'absolute'}}\n                                    attached='top left'\n                                    color='red'\n                                    >\n                                    Event Cancelled </Label>\n                                }    \n                                <Image\n                                    circular\n                                    floated='right'\n                                    size='tiny'\n                                    src={activity.host?.Image || '/assets/user.jpeg'}\n                                    />\n                                    <Card.Header className='custom-font'>{activity.title}</Card.Header>\n                                    <Card.Meta>{format(activity.date!,'dd MMM yyyy h:mm aa')}</Card.Meta>\n                                    <Card.Description>\n                                    Posted By:  <strong>\n                                        <Link to={`/profiles/${activity.host?.userName}`}>{activity.host?.displayName}</Link>\n                                     </strong>\n                                    { \n                                    activity.isHost && !activity.isCancelled &&\n                                      <Item.Description>\n                                           <Label\n                                                style={{ position: 'absolute' }}\n                                                color='orange'\n                                                ribbon='right'\n                                            >\n                                                You're hosting this event\n                                            </Label>\n                                      </Item.Description>\n                                      \n                                    }\n                                      { \n                                    !activity.isHost && activity.isGoing &&\n                                      <Item.Description>\n                                           <Label\n                                                \n                                                style={{ textAlign:'center',position: 'absolute'}}\n                                                attached='top left'\n                                                color='green'\n                                            >\n                                                You're also attending this event\n                                            </Label>\n                                      </Item.Description>\n                                      \n                                    }\n                                    </Card.Description>\n                                    <ActivityListParticipants user={activity.host.userName} participants={activity.participants!}/>\n                                    <Card.Content extra><Icon name='user' />{ activity.participants.length } Attending</Card.Content>\n                                    <Card.Content extra><Icon name='tag' />{75 - activity.participants.length } still seats available now</Card.Content>\n                                    {/* <Card.Description>\n                                            {activity.description}\n                                    </Card.Description> */}\n                                </Card.Content>\n                                <Card.Content extra>\n                                    {\n                                        activity.isHost ? \n                                        (\n                                            <> \n                                              <div className='ui two buttons'>\n                                                <Button as={Link} to={`/activities/${activity.id}`} basic color='green' style={{ marginRight:5 }}>\n                                                  Format\n                                                </Button>\n                                                <Button onClick={() => activityStore.deleteActivity(activity.id)} basic color='red'>\n                                                  Remove\n                                                </Button>\n                                            </div>\n                                            </> \n                                        ) : \n                                        <> </>\n                                        \n                                    }\n                                <Container style={{ marginTop: 10}}>\n                                    <Card.Meta>Category: {activity.category}</Card.Meta>\n                                    <Card.Meta>Where: {activity.city}</Card.Meta>\n                                    <Card.Meta>Veneue: {activity.venue}</Card.Meta>\n                                    { !activity.isHost && \n                                      <Button as={Link} to={`/activities/${activity.id}`}\n                                      basic color={ activity.isHost ? 'blue' : 'brown'} style={{ marginTop: 12}}>\n                                        { activity.isGoing ?  'Manage Booking'  : 'Book Now' } \n                                       </Button>\n                                    }\n                                </Container>\n                                </Card.Content>\n                            </Card>\n                        ))\n                        }           \n                    </CardGroup>\n                    </Fragment>\n                ))}\n            </InfiniteScroll> \n            }\n            </Grid.Column>\n            <Grid.Column width='6' style={{ marginTop: 50}}>\n                <ActivityFilter />\n            </Grid.Column>\n        </Grid>\n    )\n}\nexport default observer(Dashboard);\n","import { useField } from \"formik\"\nimport {Form,Label} from 'semantic-ui-react'\n\ninterface Props{\n    placeholder:string,\n    name:string,\n    type?: string,\n    label?:string\n}\n\nconst CTextInput = (props:Props) => {\n    const [field,meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input className='custom-font' {...field} {...props}/>\n            {meta.touched && meta.error ? <Label pointing>{meta.error}</Label> : null }\n        </Form.Field>\n    )\n}\n\nexport default CTextInput","import { Formik ,Form,ErrorMessage} from \"formik\";\nimport CTextInput from \"../../app/common/form/CTextInput\";\nimport { Button ,Label,Header } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { useStore } from \"../../app/api/Stores/store\";\n\nconst LoginForm = () => {\n    const { userStore } = useStore();\n    return(\n            <Formik\n            initialValues={{ email:'',password:'',error:null}}\n            onSubmit={(values,{setErrors}) => userStore.LogIn(values).catch(error => setErrors({error:error.response.data})) }\n            >\n                {({handleSubmit, isSubmitting,errors}) => (\n                    <Form className='ui form' onSubmit={handleSubmit}>\n                        <Header content='LogIn To View Latest Events' textAlign='center' as='h5' className='custom-font'/>\n                        <CTextInput name='email' placeholder='Email'/>\n                        <CTextInput name='password' placeholder='Password' type='password'/>\n                        <ErrorMessage\n                          name='error'\n                          render={() => <Label style={{ marginBottom:10 }} pointing >{errors.error}</Label>}\n                        />\n                        <Button loading={isSubmitting} basic color='grey' content='LOG IN' type='submit' fluid/>\n                    </Form>\n                )}\n            </Formik>\n    )\n}\n\nexport default observer(LoginForm);","import { Message } from \"semantic-ui-react\";\n\ninterface Props{\n    errors:any;\n}\n\nconst ValidationErrors = ({errors}:Props) => {\n    return (\n        <Message error>\n            {\n                errors && \n                <Message.List>\n                    { \n                    errors.map((error:any,index:any) => (\n                        <Message.Item key={index}>{error}</Message.Item>\n                    ))\n                    }\n                </Message.List>\n            }\n        </Message>\n    )\n}\n\nexport default ValidationErrors;","import { Formik ,Form,ErrorMessage} from \"formik\";\nimport CTextInput from \"../../app/common/form/CTextInput\";\nimport { Button,Header } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { useStore } from \"../../app/api/Stores/store\";\nimport * as Yup from 'yup'\nimport ValidationErrors from '../Errors/ValidationErrors'\n\nconst RegisterForm = () => {\n    const { userStore } = useStore();\n    const validations = {\n        displayName: Yup.string().required(),\n        userName: Yup.string().required(),\n        email: Yup.string().required().email(),\n        password: Yup.string().required(),\n    }\n    return(\n            <Formik\n            initialValues={{ email:'',password:'',displayName:'',userName:'',error:null}}\n            onSubmit={(values,{setErrors}) => userStore.Register(values).catch(error => setErrors({error}))}\n            validationSchema={Yup.object(validations)}\n            >\n                {({handleSubmit, isSubmitting,errors,isValid,dirty}) => (\n                    <Form className='ui form error' onSubmit={handleSubmit}>\n                        <Header content='Sign Up To View Latest Events' textAlign='center' as='h5' className='custom-font'/>\n                        <CTextInput name='email' placeholder='Email'/>\n                        <CTextInput name='displayName' placeholder='Display Name'/>\n                        <CTextInput name='userName' placeholder='User Name'/>\n                        <CTextInput name='password' placeholder='Password' type='password'/>\n                        <ErrorMessage\n                          name='error'\n                          render={() => <ValidationErrors errors={errors.error}/>}\n                        />\n                        <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting}\n                         basic color='grey' content='REGISTER' type='submit' fluid/>\n                    </Form>\n                )}\n            </Formik>\n    )\n}\n\nexport default observer(RegisterForm);","import {Segment,Header,Container,Button, Divider, Image} from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { useStore } from '../../app/api/Stores/store'\nimport LoginForm from '../users/LoginForm'\nimport RegisterForm from '../users/RegisterForm'\n\nconst Home = () => {\n    const { userStore ,modalStore } = useStore();\n    return(\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Image verticalAlign='middle' circular src='/assets/custom.png' />\n                { userStore.IsLoggedIn ?  \n                (\n                  <> \n                     <h4 className='custom-font'>\n                      Take a  tour of EventsBite\n                     </h4>\n                    <Header as='h5' inverted className='custom-font' content='Managing your own events has now become even more simpler'/>\n                    <Button as={Link} to={'/activities'} size='large' basic inverted color='black' className='custom-font'>\n                      Take Me To Events\n                    </Button>\n                  </>  \n                  ) : ( \n                    <> \n                      <Header as='h3' inverted className='custom-font' content='Take A Tour'/>\n                      <Button onClick={() => modalStore.OpenModal(<LoginForm/>)} size='small' basic inverted color='black' className='custom-font'>\n                        LOG ME IN\n                      </Button>\n                      <Button onClick={() => modalStore.OpenModal(<RegisterForm/>)} size='small' basic inverted color='black' className='custom-font'>\n                        REGISTER\n                      </Button>\n                      <Divider horizontal inverted>OR</Divider>\n                      <Button onClick={() => userStore.FacebookLogin()}\n                              loading={userStore.fbLoading}\n                              basic \n                              inverted \n                              size='large'\n                              color='facebook' \n                              className='custom-font'>\n                        FACEBOOK LOGIN\n                      </Button>\n                    </>\n                )\n                }\n            </Container>\n        </Segment>\n    )\n}\n\n\nexport default observer(Home)","import {Dimmer,Loader} from 'semantic-ui-react';\n\ninterface Prop{\n    inverted?:boolean, /** For darker background */\n    content:string\n}\n\nexport const LoadingComponent = ({inverted=true,content}:Prop) => {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader>{content}</Loader>\n        </Dimmer>\n    )\n};","import { useField } from \"formik\"\nimport {Form,Label} from 'semantic-ui-react'\n\ninterface Props{\n    placeholder:string,\n    name:string,\n    label?:string,\n    rows:number\n}\n\nconst CTextArea = (props:Props) => {\n    const [field,meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea className='custom-font' {...field} {...props}/>\n            {meta.touched && meta.error ? <Label pointing>{meta.error}</Label> : null }\n        </Form.Field>\n    )\n}\n\nexport default CTextArea","import { useField } from \"formik\"\nimport {Form,Label,Select} from 'semantic-ui-react'\n\ninterface Props{\n    placeholder:string,\n    name:string,\n    label?:string,\n    options:any\n}\n\nconst CSelectInput = (props:Props) => {\n    // helpers allows us to manually set a value and the touched status of our input.\n    const [field,meta,helpers] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <Select \n            clearable\n            placeholder={props.placeholder}\n            options={props.options}\n            value={field.value || null}\n            onChange={(event,data) => helpers.setValue(data.value)}\n            onBlur={() => helpers.setTouched(true)}\n            />\n            {meta.touched && meta.error ? <Label pointing>{meta.error}</Label> : null }\n        </Form.Field>\n    )\n}\n\nexport default CSelectInput","import { useField } from \"formik\"\nimport {Form,Label} from 'semantic-ui-react'\nimport Datepicker,{ReactDatePickerProps} from 'react-datepicker'\n\n/**\n * By wrapping ReactDatePickerProps within partials we're making these props optional so that we won't get any error for props\n *  that are compulsary.\n */\nconst CDateInput = (props:Partial<ReactDatePickerProps>) => {\n    const [field,meta,helpers] = useField(props.name!);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <Datepicker\n             {...field}\n             {...props}\n             selected={(field.value && new Date(field.value)) || null}\n             onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? <Label pointing>{meta.error}</Label> : null }\n        </Form.Field>\n    )\n}\n\nexport default CDateInput","export const CatergoryOptions = [\n    {text:'Drinks',value:'Drinks'},\n    {text:'Culture',value:'Culture'},\n    {text:'Film',value:'Film'},\n    {text:'Food',value:'Food'},\n    {text:'Music',value:'Music'},\n    {text:'Travel',value:'Travel'}\n]","import { useState,useEffect } from \"react\"\nimport { Segment,Button,Container,Header} from \"semantic-ui-react\"\nimport { useStore } from \"../../app/api/Stores/store\";\nimport { observer } from 'mobx-react-lite';\nimport { Link,useHistory,useParams } from \"react-router-dom\";\nimport { LoadingComponent } from \"../../app/layouts/LoadingComponent\";\nimport { v4 as uuid } from 'uuid';\nimport { Formik,Form } from \"formik\";\nimport * as Yup from 'yup'\nimport CTextInput from \"../../app/common/form/CTextInput\";\nimport CTextArea from \"../../app/common/form/CTextArea\";\nimport CSelectInput from \"../../app/common/form/CSelectInput\";\nimport CDateInput from \"../../app/common/form/CDateInput\";\nimport { CatergoryOptions } from \"../../app/common/form/CategoryOptions\";\nimport { ActivityForm } from \"../../app/models/activity\";\n\nconst AForm = () => {\n    const { activityStore } = useStore();\n    const { LoadActivity,InitialLoading, createActivity,updateActivity}  = activityStore\n    let { id } = useParams<{id:string}>();\n    let history = useHistory()\n\n    // add <Activity> to remove error from setActivity inside useEffect so that it'll know what type of object.\n    // Install date-fns so that we can format dates to string as we are passing Date object to browser which it won't display unless it is\n    // a string.\n    const [activity,setActivity] = useState<ActivityForm>(new ActivityForm());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('Title must not be empty'),\n        date:Yup.string().required('date must not be empty').nullable(),\n        description:Yup.string().required('description must not be empty'),\n        category:Yup.string().required('category must not be empty'),\n        city:Yup.string().required('city must not be empty'),\n        venue:Yup.string().required('venue must not be empty')\n    })\n\n    useEffect(() => {\n        if(id) LoadActivity(id).then((activity) => setActivity(new ActivityForm(activity!)))\n    },[id,LoadActivity])\n\n\n    const handleSubmit = (activity:ActivityForm) => {\n        if(!activity.id){\n            let newActivity = {\n                ...activity,id:uuid()\n            }\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\n        }\n        else{\n            console.log(\"Updating activity.....\")\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\n        }\n    }\n\n    // const handleChange = (event:ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    //     const {name, value} = event.target;\n    //     setActivity({...activity,[name]:value})\n    // }\n\n    if(InitialLoading) return (<LoadingComponent content='Editing or Creating Activity....'/>)\n\n    return (\n        <Container>\n            <Header className='custom-font' as='h2'>Manage Your Events</Header>\n            <Segment clearing>\n                <Formik \n                validationSchema={validationSchema}\n                enableReinitialize \n                initialValues={activity} \n                onSubmit={(values) => handleSubmit(values)}>\n                    {({handleSubmit, isValid,isSubmitting,dirty}) => (\n                        <Form className='ui form custom-font' onSubmit={handleSubmit}>\n                            <Header size='small' className='custom-font'>ACTIVITY DETAILS</Header>\n                            <CTextInput name='title' placeholder='Title'/>\n                            <CTextArea rows={3} placeholder='Description' name='description'/>\n                            <CSelectInput options={CatergoryOptions} placeholder='Select your Category'  name='category'/>\n                            <CDateInput \n                                placeholderText='Date'\n                                showTimeSelect\n                                timeCaption='time'\n                                dateFormat='MMMM d, yyyy h:mm aa'\n                                name='date'\n                            />\n                            <Header size='small' className='custom-font'>LOCATION DETAILS</Header>\n                            <CTextInput placeholder='City' name='city'/>\n                            <CTextInput placeholder='Venue' name='venue'/>\n                            <Button disabled={isSubmitting || !dirty || !isValid}\n                            className='custom-font' loading={isSubmitting} floated='right' positive type='submit'>Submit</Button>\n                            <Button as={Link} className='custom-font' to={'/activities/'} floated='right' type='button'>Cancel</Button>\n                    </Form>\n                    )}\n                </Formik>\n            </Segment>\n        </Container>\n    )\n}\n\nexport default observer(AForm)","import { Image,Segment,Button,Header,Item,Label } from \"semantic-ui-react\";\nimport {Activity} from '../../../app/models/activity'\nimport { observer } from 'mobx-react-lite'\nimport {Link} from 'react-router-dom'\nimport { format } from \"date-fns\";\nimport { useStore } from \"../../../app/api/Stores/store\";\n\ninterface Props {\n    activity: Activity\n}\n\nconst ActivityHeader = ({activity}:Props) => {\n    const { activityStore } = useStore();\n    const activityImageStyle = {\n        filter: 'brightness(30%)'\n    };\n    \n    const activityImageTextStyle = {\n        position: 'absolute',\n        bottom: '5%',\n        left: '5%',\n        width: '100%',\n        height: 'auto',\n        color: 'white'\n    };\n    \n    return(\n         <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n                {\n                    activity.isCancelled &&\n                    <Label\n                       style={{ position: 'absolute',zIndex:1000,left:80,top:20 }}\n                       color='red'\n                       ribbon='right'\n                       >\n                     Cancelled </Label>\n                }\n                <Image src={'/assets/Activity.png'} fluid style={activityImageStyle}/>\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                    className='custom-font'\n                                />\n                                <p>{format(activity.date!,'dd MMM yyyy h:mm aa')}</p>\n                                <p>\n                                    Hosted by <strong>{activity.hostUserName}</strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {\n\n                    activity.isHost ? \n                    (\n                      <> \n                        <Button \n                            basic onClick={activityStore.cancelActivity} loading={activityStore.Loading}\n                            color= { activity.isCancelled ? 'brown' : 'green'} floated='left' className='custom-font'>\n                            { activity.isCancelled ? 'Re-Activate-Event' : 'Cancel Event'}\n                        </Button>\n                        <Button disabled={activity.isCancelled} as={Link} to={`/manage/${activity.id}`} color='orange' floated='right' className='custom-font'>\n                            Manage Event\n                       </Button>\n                      </>\n                    ) : activity.isGoing ? \n                    ( <Button \n                        loading={activityStore.Loading}\n                        onClick={activityStore.updateAttendance} className='custom-font'>Cancel attendance</Button> ) \n                    :  <Button disabled={activity.isCancelled} \n                       loading={activityStore.Loading} onClick={activityStore.updateAttendance} color='teal' className='custom-font'>Join Activity</Button>\n                }\n            </Segment>\n        </Segment.Group>\n\n    )\n}\n\nexport default observer(ActivityHeader)\n","import { Container,Divider } from \"semantic-ui-react\";\nimport { observer } from 'mobx-react-lite'\n\nconst ActivityDescription = () => {\n    return(\n        <Container style={{ marginTop:'50px' }}>\n            <b>Description</b>\n            <Divider />\n            <p>\n            Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo\n            ligula eget dolor. Aenean massa strong. Cum sociis natoque penatibus et\n            magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis,\n            ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa\n            quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget,\n            arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.\n            Nullam dictum felis eu pede link mollis pretium. Integer tincidunt. Cras\n            dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus.\n            Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim.\n            Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus\n            viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet.\n            Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi.\n            </p>\n    </Container>\n    )\n}\n\nexport default observer(ActivityDescription)","import { Comment,Divider,Container, Loader } from \"semantic-ui-react\";\nimport { observer } from 'mobx-react-lite'\nimport { useStore } from \"../../../app/api/Stores/store\";\nimport { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Formik,Form, Field,FieldProps } from \"formik\";\nimport *  as Yup from 'yup'\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Props{\n    activityId:string\n}\n\nconst ActivityChat = ({activityId}:Props) => {\n    const { commentStore }  = useStore();\n    useEffect(() => {\n        if(activityId)\n           commentStore.createConnection(activityId)\n        return () => commentStore.clearComments();\n    },[commentStore,activityId])\n    return(\n        <Container style={{ marginBottom:20 }}>\n            <Divider />\n            <b>Comments</b>\n            <Comment.Group>\n                { commentStore.comments.map(comment  => (\n                    <Comment key={comment.id}>\n                        <Comment.Avatar src={comment.image|| '/assets/user.jpeg'} />\n                        <Comment.Content>\n                            <Comment.Author as={Link} to={`/profiles/${comment.userName}`}>{ comment.displayName }</Comment.Author>\n                            <Comment.Text style={{ whiteSpace:'pre-wrap' }}>{comment.body}</Comment.Text>\n                            <Comment.Metadata>{formatDistanceToNow(comment.createdAt) }</Comment.Metadata>\n                        </Comment.Content>\n                    </Comment>\n                )) }\n                <Comment>\n                <Comment.Avatar as='a' src={'/assets/user.jpeg'} />\n                <Comment.Content>\n                    <Comment.Author>Tom Lukic</Comment.Author>\n                    <Comment.Text>\n                    This will be great for business reports. I will definitely download\n                    this.\n                    </Comment.Text>\n                    <Comment.Metadata>2 days ago</Comment.Metadata>\n                </Comment.Content>\n                </Comment>\n            </Comment.Group>\n            <Formik\n             onSubmit={(values,{resetForm}) => commentStore.addComment(values).then(() => resetForm())}\n             initialValues = {{ body:'' }}\n             validationSchema={\n                 Yup.object({\n                     body:Yup.string().required()\n                 })\n             }\n            >\n                {({isSubmitting,isValid,handleSubmit}) => (\n                    <Form className='ui form'>\n                        <Field name='body'>{ (props:FieldProps) => (\n                            <div style={{position:'relative'}}>\n                                <Loader active={isSubmitting}/>\n                                <textarea \n                                className='custom-font'\n                                placeholder='Post your comments here... Shift + Enter for new Line'\n                                rows={2}\n                                {...props.field}\n                                onKeyPress={(e) => {\n                                    if(e.key === 'Enter' && e.shiftKey)\n                                       return\n                                    if(e.key === 'Enter' && !e.shiftKey){\n                                       e.preventDefault()\n                                       isValid && handleSubmit()\n                                    }\n                                }}\n                                />\n                            </div>\n                        )} \n                     </Field>\n                    </Form>\n               )}\n            </Formik>\n        </Container>\n    )\n}\n\nexport default observer(ActivityChat)","import { observer } from 'mobx-react-lite'\nimport { Segment,List,Label,Image} from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { Activity } from '../../../app/models/activity';\n\ninterface Props{\n    activity:Activity\n}\n\nconst ActivitySideBar = ({activity:{participants,host} }:Props) => {\n    if(!participants) return null\n    return(\n        <>\n        <Segment\n            textAlign='center'\n            style={{ border: 'none',marginTop:'10px' }}\n            attached='top'\n            secondary\n            inverted\n        >\n        { participants!.length === 1 ? 'Only One Person' : `${participants!.length} People` } Going \n        </Segment>\n        <Segment attached inverted>\n        <b style={{ marginTop:'50px' }}>See who's attending this event</b>\n            <List relaxed divided animated verticalAlign='middle'>\n                { \n                participants!.map( participant => (\n                    <List.Item key={participant.userName}>\n                        {\n                           host?.userName === participant.userName &&\n                           <Label\n                           style={{ position: 'absolute' }}\n                           color='orange'\n                           ribbon='right'\n                           >\n                              Host\n                          </Label>\n                        }\n                        <Image avatar src={participant.image || '/assets/user.jpeg'} />\n                        <List.Content>\n                            <List.Header className='custom-font'><Link to={`/profiles/${participant.userName}`}>{participant.displayName}</Link></List.Header>\n                             { host?.userName !== participant.userName ? 'Participant ' : 'Host ' }\n                             { participant.following && <Label color='blue'>Following</Label>}\n                           </List.Content>\n                    </List.Item>\n                )) \n                }\n            </List>\n        </Segment>\n    </>\n\n\n    )\n}\n\nexport default observer(ActivitySideBar)","import { useEffect } from \"react\";\nimport { useStore } from \"../../app/api/Stores/store\";\nimport { useParams } from \"react-router-dom\";\nimport { LoadingComponent } from \"../../app/layouts/LoadingComponent\";\nimport { observer } from \"mobx-react-lite\";\nimport ActivityHeader from \"./ActivityDetails/ActivityDHeader\";\nimport ActivityDescription from \"./ActivityDetails/ActivityDescription\";\nimport ActivityChat from \"./ActivityDetails/ActivityDChat\";\nimport ActivitySideBar from \"./ActivityDetails/ActivityDSidebar\";\nimport { Grid } from \"semantic-ui-react\";\n\nconst Details = () => {\n    const { activityStore } = useStore();\n    const { LoadActivity,InitialLoading,currentActivity,clearCurrentActivity }  = activityStore\n    let { id } = useParams<{id:string}>();\n\n    useEffect(() => {\n        if(id) LoadActivity(id)\n        return () => clearCurrentActivity();\n    },[id,LoadActivity,clearCurrentActivity])\n\n    if(InitialLoading || !currentActivity) return (<LoadingComponent content='Loading Details....'/>)\n\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n               <ActivityHeader activity={activityStore.currentActivity!}/>\n               <ActivityDescription/>\n               <ActivityChat activityId={activityStore.currentActivity!.id}/>\n            </Grid.Column>\n            <Grid.Column width='6'>\n               <ActivitySideBar activity={activityStore.currentActivity!}/>\n            </Grid.Column>\n        </Grid>\n    )\n}\n\nexport default observer(Details)\n\n/* \n<Card fluid>\n    <Image src='/assets/web-logos_26.jpg' wrapped ui={false} />\n    <Card.Content>\n    <Card.Header>{activityStore.currentActivity?.title}</Card.Header>\n    <Card.Meta>{activityStore.currentActivity?.date}</Card.Meta>\n    <Card.Description>{activityStore.currentActivity?.description}</Card.Description>\n    <Container style={{ marginTop: 10}}>\n        <Card.Meta>Category: {activityStore.currentActivity?.category}</Card.Meta>\n        <Card.Meta>Where: {activityStore.currentActivity?.city}</Card.Meta> \n        <Card.Meta>Veneue: {activityStore.currentActivity?.venue}</Card.Meta>\n        <Button as={Link} to={'/activities/'} basic color='blue' style={{ marginTop: 12}}>Cancel</Button>\n    </Container>\n    </Card.Content>\n</Card> */","import { Segment,Header,Button,Container } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nconst NotFound = () => {\n    return (\n        <Segment textAlign='center' vertical> \n           <Container>\n           <Header className='custom-font'>Oops couldn't find results for your search.</Header>\n            <Button as={Link} to={'/activities'} size='large' color='black' className='custom-font'>\n                    Back To Activities\n            </Button>\n           </Container>\n        </Segment>\n    )\n}\n\nexport default NotFound;","import { useStore } from \"../../app/api/Stores/store\";\nimport { Header,Container,Segment } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\n\nconst ServerError = () => {\n    const { commonStore } = useStore();\n    return (\n        <Container textAlign='center'>\n            <Header as='h1' className='custom-font'>Server Error</Header>\n            <Header as='h5' className='custom-font'>{commonStore.error?.message}</Header>\n            {\n                commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' className='custom-font'>Stack Trace</Header>\n                    <code style={{ marginTop:'10px' }} className='custom-font'>{commonStore.error.details}</code>\n                </Segment>\n            }\n        </Container>\n    )\n}\n\nexport default observer(ServerError);","import { observer } from \"mobx-react-lite\";\nimport { useStore } from \"../api/Stores/store\";\nimport { Modal } from \"semantic-ui-react\";\n\nconst ModalContainer = () => {\n    const { modalStore } = useStore();\n    return(\n        <Modal\n           open={modalStore.modal.open} \n           onClose={modalStore.CloseModal}\n           size='tiny'\n        >\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nexport default observer(ModalContainer);","import { useDropzone } from \"react-dropzone\";\nimport { useCallback } from \"react\";\nimport {Icon,Header} from 'semantic-ui-react';\n\ninterface Props{\n    setFiles: (file:any) => void\n}\n\nconst PhotoUploadWidget = ({setFiles}:Props) => {\n    const dropzoneStyle = {\n        border:'dashed 3px #eee',\n        borderColor:'#eee',\n        borderRadius:'5px',\n        paddingTop:'30px',\n        textAlign:'center' as 'center',\n        height:200\n    }\n\n    const dropzoneActive = {\n        borderColor:'green',\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file:any) => Object.assign(file,{\n            preview:URL.createObjectURL(file)\n        })))\n        console.log(acceptedFiles);\n      }, [setFiles])\n      const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n    \n      return (\n        <div {...getRootProps()} style={ isDragActive ? {...dropzoneActive,...dropzoneStyle} : dropzoneStyle }>\n          <input {...getInputProps()} />\n          <Icon name='upload' size='huge'/>\n          <Header className='custom-font' content='Drop your file here'/>\n        </div>\n      )\n}\n\nexport default PhotoUploadWidget;","import { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\n\ninterface Props{\n    imagePreview:string,\n    setCropper:(cropper:Cropper) => void\n}\n\nconst PhotoCropperWidget = ({imagePreview,setCropper}:Props) => {\n    \n    return (\n        <Cropper \n         src={imagePreview}\n         style={{ height:200,width:'100%' }}\n         initialAspectRatio={2}\n         viewMode={1}\n         aspectRatio={2}\n         preview='.img-preview'\n         guides={false}\n         autoCropArea={1}\n         background={false}\n         onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}\n\nexport default PhotoCropperWidget;","import { useEffect, useState } from \"react\";\nimport { Step,Container,Grid, Button } from \"semantic-ui-react\";\nimport PhotoUploadWidget from \"./PhotoUploadWidget\";\n// import { Cropper } from 'react-cropper';\nimport PhotoCropperWidget from \"./PhotoCropperWidget\";\n\ninterface Props{\n    uploadPhoto:(file:Blob) => void,\n    uploading:boolean\n}\n\nexport default function ImageUpload({uploadPhoto,uploading}:Props){\n    const [files,setFiles] = useState<any>([]);\n    const [cropper,setCropper] = useState<Cropper>();\n    const onCrop = () => {\n        if(cropper){\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\n        }\n    }\n\n    useEffect(() => {\n        // this will clean the file object from memory.\n        return () => {\n            files.forEach((file:any) => URL.revokeObjectURL(file.priview));\n        }\n    },[files]);\n    return(\n        <Container style={{ marginTop:20 }}>\n          <Step.Group ordered style={{ border:'none'}} >\n            <Step >\n            <Step.Content content='Choose your photo' />\n            </Step>\n            <Step  >\n            <Step.Content content='Resize however you want'/>\n            </Step>\n            <Step >\n            <Step.Content content='Upload new photo'/>\n            </Step>\n        </Step.Group>\n        <Grid style={{ marginLeft:15 }}>\n            <Grid.Column width={4}>\n                <PhotoUploadWidget setFiles={setFiles}/>\n            </Grid.Column>\n            <Grid.Column width={1}/>\n            <Grid.Column width={4}>\n                {\n                    files && files.length > 0 && <PhotoCropperWidget setCropper={setCropper} imagePreview={ files[0].preview }/>\n                }\n            </Grid.Column>\n            <Grid.Column width={1}/>\n            <Grid.Column width={4}>\n               { files && files.length > 0 && \n                    <> \n                        <div className='img-preview' style={{ minHeight:200,overflow:'hidden', marginLeft:20 }}/>\n                        <Button.Group widths={2} style={{ marginLeft:20 }}>\n                            <Button loading={uploading} onClick={onCrop} positive icon='check'/>\n                            <Button disabled={uploading} onClick={() => setFiles([])} icon='close'/>\n                        </Button.Group>\n                    </>\n               }\n            </Grid.Column>\n        </Grid>\n        </Container>\n    )\n}\n\n// export default ImageUpload;","import { Button, Card,Image } from \"semantic-ui-react\";\nimport { Photo, Profile } from \"../../app/models/ActivityParticipant\";\nimport { observer } from \"mobx-react-lite\";\nimport { useStore } from \"../../app/api/Stores/store\";\nimport { SyntheticEvent, useState } from \"react\";\nimport ImageUpload from \"../../app/common/ImageUpload\";\n\ninterface Props{\n    profile:Profile\n}\n\nexport default observer(function ProfilePhotos({profile}:Props){\n    const { profileStore } = useStore();\n    const { IsCurrentUser ,uploadPhoto,Uploading,Loading,setMain,deletePhoto } = profileStore;\n    const [addPhotoMode,setaddPhotoMode] = useState(false);\n    const handlePhotoUpload = (file:Blob) => {\n        uploadPhoto(file).then(() => setaddPhotoMode(false))\n    }\n    const [target,setTarget] = useState(\"\")\n    const handleSetMainPhoto = (photo:Photo,e:SyntheticEvent<HTMLButtonElement>) => {\n        setTarget(e.currentTarget.name)\n        setMain(photo)\n    }\n\n    const handledeletePhoto = (photo:Photo,e:SyntheticEvent<HTMLButtonElement>) => {\n        setTarget(e.currentTarget.name)\n        deletePhoto(photo)\n    }\n    return(\n        <div> \n           <Card.Group itemsPerRow={5}>\n            { profile.photos?.map(photo => (\n                <Card\n                key={photo.id}\n                >\n                {\n                    IsCurrentUser && \n                    <>\n                        <Image src={photo.url ||  '/assets/user.jpeg'}/>\n                        <Button.Group fluid widths={2}>\n                                <Button\n                                color = 'orange'\n                                loading={Loading && target === photo.id+'set-main'} basic name={photo.id+'set-main'} disabled={photo.isMainPhoto} \n                                onClick={e => handleSetMainPhoto(photo,e)} icon='check'/>\n                                <Button\n                                basic color='red' loading={Loading && target === photo.id} disabled={photo.isMainPhoto} name={photo.id}\n                                onClick={e => handledeletePhoto(photo,e)} icon='trash'/>\n                        </Button.Group>\n                     </>\n                    \n                }\n                </Card>\n            ))}\n        </Card.Group>\n        {\n             addPhotoMode &&\n             <ImageUpload uploadPhoto={handlePhotoUpload} uploading={Uploading}/>\n         }\n         {\n             IsCurrentUser && \n             <Button\n              basic color='blue' onClick={() => setaddPhotoMode(!addPhotoMode)}\n              fluid style={{ marginTop:20 }}>{addPhotoMode ? 'Cancel' : 'Upload New Photo' }</Button>\n\n         }\n        </div>\n    )\n})\n\n// export default observer(ProfilePhotos);","import { observer } from \"mobx-react-lite\"\nimport { useStore } from \"../../app/api/Stores/store\"\nimport { Card,Button,Image,Header } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nexport default observer(function Followings(){\n    const { profileStore } = useStore();\n    const { followings } = profileStore;\n    \n    return (\n        <div> \n            <Card.Group itemsPerRow={3}>\n            { followings.length > 0 ? followings.map(profile => (\n                    <Card\n                    key={profile.userName}\n                    >\n                    <>\n                            <Image src={profile.image ||  '/assets/user.jpeg'}/>\n                            <Card.Content>\n                                <Card.Header className='custom-font'>{profile.displayName}</Card.Header>\n                                <Card.Meta>\n                                    <span className='date'>Joined in 2015</span>\n                                </Card.Meta>\n                                <Card.Description>\n                                    {profile.bio ? profile.bio : profile.displayName+' is a musician living in Nashville.'}\n                                </Card.Description>\n                                </Card.Content>\n                                <Card.Content extra>\n                                <p> {profile.followersCount} Followers </p>\n                            </Card.Content>\n                            <Button\n                                as={Link}\n                                to={`/profiles/${profile.userName}`}\n                                basic\n                                style = {{ marginTop:5 }}\n                                color = 'orange'\n                                content = 'View profile'/>\n                        </>\n                    </Card>\n                 )) :\n            <div>\n             <Header \n                  as='h5'\n                  className='custom-font' \n                  style = {{ margin:10 }} \n                  textAlign='center' \n                  content={`You do not have any ${profileStore.ActiveTab === 4 ?  'followings':'followers'} to show`}/>\n            </div>\n        }\n        </Card.Group>\n     </div>\n    )\n})\n\n// export default observer(Followings)","import { format } from \"date-fns\"\nimport { observer } from \"mobx-react-lite\"\nimport { useEffect } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { Button, Card, CardGroup, Header, Image} from \"semantic-ui-react\"\nimport { useStore } from \"../../app/api/Stores/store\"\nimport { UserActivity } from \"../../app/models/ActivityParticipant\"\n\nconst ProfilActivities = () => {\n    const{ profileStore : {LoadProfileActivities,profile,userActivities,predicate,setPredicate} } = useStore()\n\n    useEffect(() => {\n        LoadProfileActivities(profile!.userName)\n    },[LoadProfileActivities,profile,predicate])\n\n    return(\n        <>\n           <div style={{ marginTop:25 }}> \n           <div >\n                <Button onClick={() => setPredicate('past')}\n                   basic color='grey' style={{ marginRight:5 }} content='Past Events'/>                                  \n                <Button onClick={() => setPredicate('future')}\n                   basic color='grey' style={{ marginRight:5 }} content='Upcoming Events'/> \n                <Button onClick={() => setPredicate('hosting')}\n                   basic color='grey' style={{ marginRight:5 }} content='Hosting Events'/>                                 \n            </div>\n           </div> \n           <Header \n                  as='h5'\n                  className='custom-font' \n                  style = {{ margin:10 }} \n                  textAlign='center' \n                  content= { userActivities.length > 0 ? 'View an event for more details' : 'No events to show'}/>\n          <CardGroup itemsPerRow={4}>\n             {\n              userActivities.map((activity:UserActivity) => (\n                <Card\n                key={activity.id}\n                as={Link}\n                to={`/activities/${activity.id}`}\n                >\n                <Image src={'/assets/background.jpeg'} wrapped ui={false} />\n                <Card.Content>\n                <Card.Header className='custom-font'>{activity.title}</Card.Header>\n                <Card.Meta>\n                    <span className='date'>{format(new Date(activity.date),'do LLL')}</span>\n                </Card.Meta>\n                <Card.Description>\n                    {activity.category}\n                </Card.Description>\n                </Card.Content>\n            </Card>\n            )) \n        }\n        </CardGroup>\n        </>\n    )\n}\n\nexport default observer(ProfilActivities)\n","import { Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport { Button } from \"semantic-ui-react\";\nimport CTextArea from \"../../app/common/form/CTextArea\";\nimport CTextInput from \"../../app/common/form/CTextInput\";\nimport * as Yup from 'yup';\nimport { useStore } from \"../../app/api/Stores/store\";\n\n\ninterface Props {\n      setEditMode: (editMode: boolean) => void;\n}\n\nconst EditProfile = ({setEditMode}:Props) => {\n    const {profileStore: {profile, updateProfile}} = useStore();\n\n    return (\n        <Formik\n         initialValues={{displayName: profile?.displayName, bio:profile?.bio}}\n         onSubmit={values => { updateProfile(values).then(() => {setEditMode(false);}) }}\n         validationSchema={Yup.object({displayName: Yup.string().required()})}\n        >\n            {({isSubmitting, isValid, dirty}) => (\n                  <Form className='ui form'>\n                        <CTextInput placeholder='Display Name'name='displayName'/>\n                        <CTextArea rows={3} placeholder='Add your bio' name='bio'/> \n                        <Button\n                          positive\n                          type='submit'\n                          loading={isSubmitting}\n                          content='Update profile'\n                          floated='right'\n                          disabled={!isValid || !dirty}\n                        />\n                    </Form>\n            )}\n        </Formik>\n    )\n}\n\nexport default observer(EditProfile);","import {useState} from 'react';\nimport {Button, Grid, Header} from \"semantic-ui-react\";\nimport { observer } from 'mobx-react-lite';\nimport EditProfile from './EditProfile';\n\nconst ProfileAbout = () => {\n    const [editMode, setEditMode] = useState(false);\n    return(\n        <Grid>\n            <Grid.Column width='16'>\n            <Header \n                  as='h5'\n                  className='custom-font' \n                  style = {{ margin:10 }} \n                  textAlign='center' \n                  content= 'You can edit your profile here'/>\n                  <Button \n                        floated='right'\n                        color='grey'\n                        style={{ margin:10 }}\n                        basic\n                        content={editMode ? 'Cancel' : 'Edit Profile'}\n                        onClick={() => setEditMode(!editMode)}\n                  />\n                  <Grid.Column width='16'>\n                         {editMode ? <EditProfile setEditMode={setEditMode} /> : <> </> }\n                   </Grid.Column>\n            </Grid.Column>\n        </Grid>\n    )\n}\n\nexport default observer(ProfileAbout);","import { Tab } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/ActivityParticipant\";\nimport ProfilePhotos from \"./ProfilePhotos\"; \nimport {observer} from \"mobx-react-lite\";\nimport Followings from \"./Followings\";\nimport { useStore } from \"../../app/api/Stores/store\";\nimport ProfilActivities from \"./ProfilActivities\";\nimport ProfileAbout from \"./ProfileAbout\";\n\ninterface Props{\n    profile:Profile,\n}\nconst ProfileContent = ({profile}:Props) => {\n    const { profileStore,userStore:{ user }  } = useStore()\n    const about = \"In publishing and graphic design, Lorem ipsum is a placeholder text commonly used to demonstrate the visual form of a document or a typeface\" + \n    \"without relying on meaningful content. Lorem ipsum may be used as a placeholder before final copy is available.\"\n    let panes = [\n        { menuItem: 'Edit', render: () => user?.userName === profile.userName ?  <ProfileAbout/> : <> </> },\n        { menuItem: 'Events', render: () => <ProfilActivities/> },\n        { menuItem: 'Photos', render: () => <Tab.Pane className='custom-font'><ProfilePhotos profile={profile}/></Tab.Pane> },\n        { menuItem: 'Followers', render: () => <Tab.Pane loading={profileStore.LoadingFollowings} className='custom-font'><Followings /></Tab.Pane> },\n        { menuItem: 'Following', render: () => <Tab.Pane loading={profileStore.LoadingFollowings} className='custom-font'><Followings /></Tab.Pane> },\n      ]\n\n    // if(user!.userName !== profile.userName)\n    //     panes.splice(0,1)\n\n    return(\n        <div style={{ margin:10 }}>\n           <h3 className='custom-font'>\n               Bio\n           </h3>\n           <p>{profile.bio ? profile.bio : about}</p>\n           <Tab panes={panes} onTabChange={(e,data) => profileStore.setActiveTab(data.activeIndex)}/>\n        </div>\n    )\n}\n\nexport default observer(ProfileContent);","import { Grid,List, Item, ItemGroup,Header,Card,Button,Image,Feed,Icon } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/ActivityParticipant\";\nimport ProfileContent from \"./ProfileContent\";\nimport {observer} from 'mobx-react-lite';\nimport { store, useStore } from \"../../app/api/Stores/store\";\n\ninterface Props{\n    profile:Profile\n}\nconst ProfileHeader = ({profile}:Props) => {\n    const user = store.userStore.user;\n    const { profileStore } = useStore();\n    const toggleFollow = () => {\n        profile.following ? profileStore.updateFollowing(profile.userName,false) : profileStore.updateFollowing(profile.userName,true)\n    }\n    const BackgroundStyle = {\n        position: 'absolute',\n        top: '5%',\n        left: '10%',\n        width: '100%',\n        height: 'auto',\n        border:'none' \n    };\n    const whiteText = {\n        color:'white'\n    }\n    const marginStyle = {\n        marginBottom:20,\n        marginTop:10,\n        color:'white'\n    }\n    return(\n        <>\n            <Grid  style={{ marginTop:10,marginBottom:10 }}>\n                <Grid.Column width={11} >\n                    <> \n                    <Image src={'/assets/background.jpeg'} fluid style={{ border:'none',height:'350px',borderRadius:10 }}/>\n                    <ItemGroup style={BackgroundStyle}>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.jpeg'}/>\n                            <Item.Content verticalAlign='middle' style={whiteText}> \n                                <Header as='h1' className='custom-font' style={marginStyle}> {profile.displayName} </Header>\n                                <p style={whiteText}><Icon name='envelope' />{profile.displayName}@gmail.com</p>\n                                <p style={whiteText}><Icon name='phone' />Not Available</p>\n                                <p style={whiteText}><Icon name='calendar alternate' />20 - 07 - 1961</p>\n                                <p style={whiteText}><Icon name='clipboard' />20 Events</p>\n                                <List horizontal>\n                                    <List.Item>\n                                       <p style={whiteText}><Icon name='user' />{profile.followersCount > 1 ? profile.followersCount+\n                                       ' Followers' : profile.followersCount + ' Follower'}</p>\n                                    </List.Item>\n                                    <List.Item>\n                                       <p style={whiteText}><Icon name='user' />{profile.followingCount > 1 ? profile.followingCount+ \n                                       ' Followings' : profile.followingCount + ' Following'}</p>\n                                    </List.Item>\n                                    <List.Item>\n                                       <p style={whiteText}><Icon name='user circle' /> 300 Suggestions</p>\n                                    </List.Item>\n                                </List>\n                                {\n                                    profile.userName !== user?.userName && \n                                    <Button \n                                    onClick={() => toggleFollow()}\n                                    fluid\n                                    color='blue'\n                                    content= { profile.following ? 'Un Follow' : 'Follow'}\n                                    className='custom-font'\n                                    style={{backgroundColor:'none',paddingLeft:15,paddingRight:15,width:'50%',margin:10}}\n                                   />\n                                }\n                            </Item.Content>\n                        </Item>\n                    </ItemGroup>\n                    </>\n                    \n                    <ProfileContent profile={profile}/>\n                </Grid.Column>\n                <Grid.Column width={5}>\n                     <Card style={{ width:'auto' }}>\n                        <Card.Content>\n                        <Card.Header className='custom-font'>People you may know</Card.Header>\n                        </Card.Content>\n                        <Card.Content>\n                        <Feed>\n                        <Feed.Event>\n                            <Feed.Label image='/assets/user.jpeg' />\n                            <Feed.Content>\n                            <Feed.Summary content='Mary Jane' className='bold-font'/>\n                                <Feed.Summary  ><Icon name='clipboard'/>\n                                 Hosted 120 Events so far\n                                </Feed.Summary>\n                                <List horizontal style={{ marginBottom:5 }}>\n                                    <List.Item>\n                                       <p ><Icon name='handshake' /> 60 Friends</p>\n                                    </List.Item>\n                                    <List.Item>\n                                       <p ><Icon name='user' /> 178 Following</p>\n                                    </List.Item>\n                                </List>\n                                <div className='ui two buttons'>\n                                    <Button basic color='blue' size='tiny' style={{ marginRight:4}} content='Send Request'/>\n                                    <Button basic color='blue' content='See Profile'/>\n                                </div>\n                                \n                            </Feed.Content>\n                            </Feed.Event>\n\n                            <Feed.Event>\n                            <Feed.Label image='/assets/user.jpeg' />\n                            <Feed.Content>\n                            <Feed.Summary content='Bob Lame' className='bold-font'/>\n                                <Feed.Summary ><Icon name='clipboard'/>\n                                 Hosted 160 Events so far\n                                </Feed.Summary>\n                                <List horizontal style={{ marginBottom:5 }}>\n                                    <List.Item>\n                                       <p ><Icon name='handshake' /> 220 Friends</p>\n                                    </List.Item>\n                                    <List.Item>\n                                       <p ><Icon name='user' /> 20 Following</p>\n                                    </List.Item>\n                                </List>\n                                <div className='ui two buttons'>\n                                    <Button basic color='blue' size='tiny' style={{ marginRight:4}} content='Send Request'/>\n                                    <Button basic color='blue' content='See Profile'/>\n                                </div>\n                            </Feed.Content>\n                            </Feed.Event>\n\n                            <Feed.Event>\n                            <Feed.Label image='/assets/user.jpeg' />\n                            <Feed.Content>\n                                <Feed.Summary content='Tom Henwick' className='bold-font'/>\n                                <Feed.Summary ><Icon name='clipboard'/>\n                                 Hosted 100 Events so far\n                                </Feed.Summary>\n                                <List horizontal style={{ marginBottom:5 }}>\n                                    <List.Item>\n                                       <p ><Icon name='handshake' /> 50 Friends</p>\n                                    </List.Item>\n                                    <List.Item>\n                                       <p ><Icon name='user' /> 20 Following</p>\n                                    </List.Item>\n                                </List>\n                                <div className='ui two buttons'>\n                                    <Button basic color='blue' size='tiny' style={{ marginRight:4}} content='Send Request'/>\n                                    <Button basic color='blue' content='See Profile'/>\n                                </div>\n                            </Feed.Content>\n                            </Feed.Event>\n                        </Feed>\n                        </Card.Content>\n                    </Card>\n                     \n                    <Card>\n                        <Card.Content>\n                        <Card.Header className='custom-font'>Recent Activity</Card.Header>\n                        </Card.Content>\n                        <Card.Content>\n                        <Feed>\n                            <Feed.Event>\n                            <Feed.Label image='/assets/user.jpeg' />\n                            <Feed.Content>\n                                <Feed.Date content='1 day ago' />\n                                <Feed.Summary>\n                                You added Jenny Hessto your coworker group.\n                                </Feed.Summary>\n                            </Feed.Content>\n                            </Feed.Event>\n\n                            <Feed.Event>\n                            <Feed.Label image='/assets/user.jpeg' />\n                            <Feed.Content>\n                                <Feed.Date content='3 days ago' />\n                                <Feed.Summary>\n                                You added Molly Maloneas a friend.\n                                </Feed.Summary>\n                            </Feed.Content>\n                            </Feed.Event>\n\n                            <Feed.Event>\n                            <Feed.Label image='/assets/user.jpeg' />\n                            <Feed.Content>\n                                <Feed.Date content='4 days ago' />\n                                <Feed.Summary>\n                                You added Elliot Baker to your musicians group.\n                                </Feed.Summary>\n                            </Feed.Content>\n                            </Feed.Event>\n                        </Feed>\n                        </Card.Content>\n                        </Card>\n                </Grid.Column>\n            </Grid>\n        </>\n    )\n}\n\nexport default observer(ProfileHeader);\n\n/*\n <Card.Group >\n     <Card className='custom-font' style={{ paddingTop:5,paddingBottom:5,paddingLeft:5,paddingRight:6}}>\n          <Image src='/assets/user.jpeg' />\n                            <Card.Content>\n                            <Card.Header className='custom-font'>Helen</Card.Header>\n                            <Card.Meta>Joined in 2018</Card.Meta>\n                            <Card.Description>Primary Contact</Card.Description>\n                            </Card.Content>\n                            <div className='ui two buttons'>\n                                <Button basic color='black' style={{ marginRight:4}} content='Send Request'/>\n                                <Button basic color='black' content='See Profile'/>\n                           </div>\n     </Card>  \n</Card.Group>\n\n*/","import { Grid } from \"semantic-ui-react\";\nimport ProfileHeader from \"./ProfileHeader\";\nimport { observer } from \"mobx-react-lite\";\nimport { useParams } from \"react-router\";\nimport { useStore } from \"../../app/api/Stores/store\";\nimport { useEffect } from \"react\";\nimport { LoadingComponent } from \"../../app/layouts/LoadingComponent\";\n\nconst Profile = () => {\n    const { username } = useParams<{username:string}>();\n    const { profileStore } = useStore();\n    const { LoadProfile , profile, LoadingProfile,setActiveTab } = profileStore;\n    useEffect(() => {\n        LoadProfile(username)\n        return () => setActiveTab(0)\n    },[LoadProfile,username,setActiveTab])\n    if(LoadingProfile)\n       return <LoadingComponent content='Loading Profile.....'/>\n    return(\n        <Grid>\n            <Grid.Column width={16}>\n                { profile &&  <ProfileHeader profile={profile}/>}        \n            </Grid.Column>\n        </Grid>\n    )\n}\n\nexport default observer(Profile);","import { Redirect, Route, RouteComponentProps,RouteProps} from \"react-router-dom\";\nimport { useStore } from \"../api/Stores/store\";\n\ninterface Props extends RouteProps{\n    component:React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\n}\n\n// ...rest to pass rest of the properties inside Props\nconst PrivateRoute = ({component:Component,...rest}:Props) => {\n    const { userStore : {IsLoggedIn}} = useStore();\n    return(\n        <Route\n         {...rest}\n         render={(props) => IsLoggedIn ? <Component {...props}/> : <Redirect to='/' /> }\n         />\n    )\n}\n\nexport default PrivateRoute;","import { useLocation } from \"react-router-dom\";\n\nexport default function UseQuery() {\n    return new URLSearchParams(useLocation().search);\n}","import { Header, Segment,Icon, Button } from \"semantic-ui-react\";\nimport Agent from \"../../app/api/agent\";\nimport UseQuery from \"../../app/common/hooks\";\n\nconst RegSuccess = () => {\n    const email = UseQuery().get('email') as string\n    const resendEmail = () => Agent.Account.resendVerificationEmail(email)\n                        .then(() => console.log(\"Email is verified by the user.....\"))\n                        .catch((error) => console.log(error))\n    return (\n        <>\n          <Segment textAlign='center' placeholder>\n              <Header icon as='h3' className='custom-font'><Icon name='check'/>You're now successfully regsitered with EventsBITE.</Header>\n              <p className='custom-font'>Please check also your junk mail for verification email.</p>\n              {\n                  email && \n                  <>\n                    <p>Didn't Received verification email.</p>\n                    <Button basic color='grey' content='Resend Email' className='custom-font' onClick={resendEmail}/> \n                  </>\n              }\n          </Segment>\n        </>\n    )\n}\n\nexport default RegSuccess;","import { useEffect, useState } from \"react\";\nimport { Header, Segment,Icon, Button } from \"semantic-ui-react\";\nimport Agent from \"../../app/api/agent\";\nimport { useStore } from \"../../app/api/Stores/store\";\nimport UseQuery from \"../../app/common/hooks\";\nimport LoginForm from \"./LoginForm\";\n\nconst ConfirmEmail = () => {\n    const { modalStore } = useStore();\n    const email = UseQuery().get('email') as string\n    const token = UseQuery().get('token') as string\n    const Status = {\n        Verifying:'Verifying',\n        Failed:'Failed',\n        Success:\"Success\"\n    }\n    const [status,setstatus] = useState(Status.Verifying);\n\n\n    const resendEmail = () => Agent.Account.resendVerificationEmail(email)\n                        .then(() => console.log(\"Email is verified by the user.....\"))\n                        .catch((error) => console.log(error));\n\n    const Body = () => {\n        switch(status){\n            case Status.Failed:\n                 return (\n                  <> \n                    <p className='custom-font'>Unable to verify your email please try again or check your email if you've entered it correctly.</p> \n                    <Button basic color='grey' content='Resend Email' className='custom-font' onClick={resendEmail}/> \n                  </>\n                  )\n            case Status.Verifying:\n                 return <p className='custom-font'>Please wait while we verify your email.......</p>\n            case Status.Success:\n                 return(\n                      <>\n                        <p className='custom-font'>Your email is verified and you can now successfully login..</p> \n                        <Button basic color='grey' content='LogIn' className='custom-font' onClick={() => modalStore.OpenModal(<LoginForm/>)}/> \n                      </>                 \n                     )\n        }\n    }\n\n    useEffect(() => {\n        Agent.Account.verifyEmail(token,email).then(() => setstatus(Status.Success)).catch(() => setstatus(Status.Failed))\n    },[Status.Failed,Status.Success,email,token]);\n\n\n    return (\n        <>\n          <Segment textAlign='center' placeholder>\n              <Header icon as='h3' className='custom-font'><Icon name='envelope'/>Email Verification.</Header>\n              <Segment.Inline>{Body}</Segment.Inline>\n          </Segment>\n        </>\n    )\n}\n\nexport default ConfirmEmail;","import React, { Fragment, useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport  NavBar  from './NavBar';\nimport  Dashboard  from '../../Feautures/activities/Dashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route,useLocation,Switch } from 'react-router-dom'\nimport Home from '../../Feautures/activities/Home';\nimport AForm from '../../Feautures/activities/AForm';\nimport Details  from '../../Feautures/activities/Details';\nimport '../../../src/App.css'\nimport NotFound from '../../Feautures/Errors/NotFound';\nimport ServerError from '../../Feautures/Errors/ServerError';\nimport LoginForm from '../../Feautures/users/LoginForm';\nimport { useStore } from '../api/Stores/store';\nimport { LoadingComponent } from './LoadingComponent';\nimport ModalContainer from '../common/ModalContainer';\nimport Profile from '../../Feautures/Profiles/Profile';\nimport PrivateRoute from './PrivateRoute';\nimport RegSuccess from '../../Feautures/users/RegSuccess';\nimport ConfirmEmail from '../../Feautures/users/ConfirmEmail';\nimport { ToastContainer } from 'react-toastify';\n\nconst App = () => {\n  const location  = useLocation();\n  const { commonStore, userStore } = useStore();\n  useEffect(() => {\n    // check for token in local storage\n    if(commonStore.token) userStore.getUserWithMatchingToken().finally(() => commonStore.setAppLoaded())\n    else{\n      userStore.FacebookLoginStatus().then(() => commonStore.setAppLoaded())\n    } \n  },[commonStore, userStore])\n\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading your app...'/>\n  return (\n    <>\n      <ModalContainer />\n      <ToastContainer position='bottom-right' />\n      <Route exact path=\"/\" component={Home}/>\n      <Route \n         path={'/(.+)'}\n         render={() => (\n           <> \n              <NavBar/>\n              <Container style={{ marginTop:'4rem'}} >\n                <Switch>\n                  <PrivateRoute exact path=\"/activities\" component={Dashboard}/>\n                  <PrivateRoute path=\"/activities/:id\" component={Details}/>\n                  <PrivateRoute key={location.key} path={[\"/createActivity\",\"/manage/:id\"]} component={AForm}/>\n                  <PrivateRoute path=\"/not-found-error\"component={NotFound}/>\n                  <PrivateRoute path=\"/server-error\" component={ServerError}/>\n                  <Route path=\"/login\" component={LoginForm}/>\n                  <Route path=\"/account/registration-success\" component={RegSuccess}/>\n                  <Route path=\"account/verifyEmail\" component={ConfirmEmail}/>\n                  <PrivateRoute path=\"/profiles/:username\" component={Profile}/>\n                </Switch>\n              </Container>\n           </>\n         )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\n\nconst ScrollToTop = () => {\n    const { pathname } = useLocation();\n    useEffect(() => {\n        window.scrollTo(0,0)\n    },[pathname])\n    return null\n}\n\nexport default ScrollToTop\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layouts/styles.css';\nimport App from './app/layouts/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport { store,StoreContext } from './app/api/Stores/store';\nimport {Router} from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layouts/ScrollToTop';\n\nexport const history = createBrowserHistory();\n/** \n * with BrowserRouter we can pass history object only to components that are wrapped inside <App/> for redirection\n * whereas with Router we can pass history object to modules or folders that are externally used by those components for example \n * agents.ts which is not a component but we are history.push(url) inside it for redirection but firstly we need to import \n * createBrowserHistory from history and then pass it as a prop to <Router />,later we can import in files we ant to use.\n * \n * \n */\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop/>\n      <App />\n    </Router>\n  </StoreContext.Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}